// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.6.1
// source: ra.proto

package pb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "github.com/gogo/googleapis/google/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root *RootCertificate `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *RegisterRootRequest) Reset() {
	*x = RegisterRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRootRequest) ProtoMessage() {}

func (x *RegisterRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRootRequest.ProtoReflect.Descriptor instead.
func (*RegisterRootRequest) Descriptor() ([]byte, []int) {
	return file_ra_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRootRequest) GetRoot() *RootCertificate {
	if x != nil {
		return x.Root
	}
	return nil
}

type RegisterCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *Certificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *RegisterCertificateRequest) Reset() {
	*x = RegisterCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCertificateRequest) ProtoMessage() {}

func (x *RegisterCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCertificateRequest.ProtoReflect.Descriptor instead.
func (*RegisterCertificateRequest) Descriptor() ([]byte, []int) {
	return file_ra_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterCertificateRequest) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// RevokeCertificateRequest specifies revocation request
type RevokeCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id specifies certificate ID.
	// If it's not set, then SKID must be provided
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// SKID specifies Subject Key ID to search
	Skid string `protobuf:"bytes,2,opt,name=skid,proto3" json:"skid,omitempty"`
	// Reason for revocation
	Reason Reason `protobuf:"varint,3,opt,name=reason,proto3,enum=pb.Reason" json:"reason,omitempty"`
}

func (x *RevokeCertificateRequest) Reset() {
	*x = RevokeCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCertificateRequest) ProtoMessage() {}

func (x *RevokeCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCertificateRequest.ProtoReflect.Descriptor instead.
func (*RevokeCertificateRequest) Descriptor() ([]byte, []int) {
	return file_ra_proto_rawDescGZIP(), []int{2}
}

func (x *RevokeCertificateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RevokeCertificateRequest) GetSkid() string {
	if x != nil {
		return x.Skid
	}
	return ""
}

func (x *RevokeCertificateRequest) GetReason() Reason {
	if x != nil {
		return x.Reason
	}
	return Reason_UNSPECIFIED
}

var File_ra_proto protoreflect.FileDescriptor

var file_ra_proto_rawDesc = []byte{
	0x0a, 0x08, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0a,
	0x70, 0x6b, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x4f, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x62, 0x0a, 0x18, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0xf0, 0x01,
	0x0a, 0x09, 0x52, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x6b, 0x73, 0x70, 0x61, 0x6e, 0x64, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ra_proto_rawDescOnce sync.Once
	file_ra_proto_rawDescData = file_ra_proto_rawDesc
)

func file_ra_proto_rawDescGZIP() []byte {
	file_ra_proto_rawDescOnce.Do(func() {
		file_ra_proto_rawDescData = protoimpl.X.CompressGZIP(file_ra_proto_rawDescData)
	})
	return file_ra_proto_rawDescData
}

var file_ra_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ra_proto_goTypes = []interface{}{
	(*RegisterRootRequest)(nil),        // 0: pb.RegisterRootRequest
	(*RegisterCertificateRequest)(nil), // 1: pb.RegisterCertificateRequest
	(*RevokeCertificateRequest)(nil),   // 2: pb.RevokeCertificateRequest
	(*RootCertificate)(nil),            // 3: pb.RootCertificate
	(*Certificate)(nil),                // 4: pb.Certificate
	(Reason)(0),                        // 5: pb.Reason
	(*RootsResponse)(nil),              // 6: pb.RootsResponse
	(*CertificateResponse)(nil),        // 7: pb.CertificateResponse
	(*RevokedCertificateResponse)(nil), // 8: pb.RevokedCertificateResponse
}
var file_ra_proto_depIdxs = []int32{
	3, // 0: pb.RegisterRootRequest.root:type_name -> pb.RootCertificate
	4, // 1: pb.RegisterCertificateRequest.certificate:type_name -> pb.Certificate
	5, // 2: pb.RevokeCertificateRequest.reason:type_name -> pb.Reason
	0, // 3: pb.RAService.RegisterRoot:input_type -> pb.RegisterRootRequest
	1, // 4: pb.RAService.RegisterCertificate:input_type -> pb.RegisterCertificateRequest
	2, // 5: pb.RAService.RevokeCertificate:input_type -> pb.RevokeCertificateRequest
	6, // 6: pb.RAService.RegisterRoot:output_type -> pb.RootsResponse
	7, // 7: pb.RAService.RegisterCertificate:output_type -> pb.CertificateResponse
	8, // 8: pb.RAService.RevokeCertificate:output_type -> pb.RevokedCertificateResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ra_proto_init() }
func file_ra_proto_init() {
	if File_ra_proto != nil {
		return
	}
	file_pkix_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ra_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ra_proto_goTypes,
		DependencyIndexes: file_ra_proto_depIdxs,
		MessageInfos:      file_ra_proto_msgTypes,
	}.Build()
	File_ra_proto = out.File
	file_ra_proto_rawDesc = nil
	file_ra_proto_goTypes = nil
	file_ra_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RAServiceClient is the client API for RAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RAServiceClient interface {
	// RegisterRoot registers root CA
	RegisterRoot(ctx context.Context, in *RegisterRootRequest, opts ...grpc.CallOption) (*RootsResponse, error)
	// RegisterCertificate registers certificate
	RegisterCertificate(ctx context.Context, in *RegisterCertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
	// RevokeCertificate returns the revoked certificate
	RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokedCertificateResponse, error)
}

type rAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRAServiceClient(cc grpc.ClientConnInterface) RAServiceClient {
	return &rAServiceClient{cc}
}

func (c *rAServiceClient) RegisterRoot(ctx context.Context, in *RegisterRootRequest, opts ...grpc.CallOption) (*RootsResponse, error) {
	out := new(RootsResponse)
	err := c.cc.Invoke(ctx, "/pb.RAService/RegisterRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAServiceClient) RegisterCertificate(ctx context.Context, in *RegisterCertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, "/pb.RAService/RegisterCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAServiceClient) RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokedCertificateResponse, error) {
	out := new(RevokedCertificateResponse)
	err := c.cc.Invoke(ctx, "/pb.RAService/RevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RAServiceServer is the server API for RAService service.
type RAServiceServer interface {
	// RegisterRoot registers root CA
	RegisterRoot(context.Context, *RegisterRootRequest) (*RootsResponse, error)
	// RegisterCertificate registers certificate
	RegisterCertificate(context.Context, *RegisterCertificateRequest) (*CertificateResponse, error)
	// RevokeCertificate returns the revoked certificate
	RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokedCertificateResponse, error)
}

// UnimplementedRAServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRAServiceServer struct {
}

func (*UnimplementedRAServiceServer) RegisterRoot(context.Context, *RegisterRootRequest) (*RootsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRoot not implemented")
}
func (*UnimplementedRAServiceServer) RegisterCertificate(context.Context, *RegisterCertificateRequest) (*CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCertificate not implemented")
}
func (*UnimplementedRAServiceServer) RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}

func RegisterRAServiceServer(s *grpc.Server, srv RAServiceServer) {
	s.RegisterService(&_RAService_serviceDesc, srv)
}

func _RAService_RegisterRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAServiceServer).RegisterRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RAService/RegisterRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAServiceServer).RegisterRoot(ctx, req.(*RegisterRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAService_RegisterCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAServiceServer).RegisterCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RAService/RegisterCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAServiceServer).RegisterCertificate(ctx, req.(*RegisterCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAService_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAServiceServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RAService/RevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAServiceServer).RevokeCertificate(ctx, req.(*RevokeCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RAService",
	HandlerType: (*RAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRoot",
			Handler:    _RAService_RegisterRoot_Handler,
		},
		{
			MethodName: "RegisterCertificate",
			Handler:    _RAService_RegisterCertificate_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _RAService_RevokeCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ra.proto",
}
