syntax = "proto3";
package pb;

option go_package = "github.com/effective-security/trusty/api/v1/pb";

import "pkix.proto";
//import "google/protobuf/empty.proto";
// for grpc-gateway
//import "google/api/annotations.proto";

service CA {
	// ProfileInfo returns the certificate profile info
	rpc ProfileInfo(CertProfileInfoRequest) returns (CertProfile) {
	}

	// GetIssuer returns the issuing CA
	rpc GetIssuer(IssuerInfoRequest) returns (IssuerInfo) {
	}

	// ListIssuers returns the issuing CAs
	rpc ListIssuers(ListIssuersRequest) returns (IssuersInfoResponse) {
	}

	// SignCertificate returns the certificate
	rpc SignCertificate(SignCertificateRequest) returns (CertificateResponse) {
	}

	// GetCertificate returns the certificate
	rpc GetCertificate(GetCertificateRequest) returns (CertificateResponse) {
	}

	// GetCRL returns the CRL
	rpc GetCRL(GetCrlRequest) returns (CrlResponse) {
	}

	// SignOCSP returns OCSP response
	rpc SignOCSP(OCSPRequest) returns (OCSPResponse) {
	}

	// RevokeCertificate returns the revoked certificate
	rpc RevokeCertificate(RevokeCertificateRequest) returns (RevokedCertificateResponse) {
	}

	// PublishCrls returns published CRLs
	rpc PublishCrls(PublishCrlsRequest) returns (CrlsResponse) {
	}

	// ListOrgCertificates returns the Org certificates
	rpc ListOrgCertificates(ListOrgCertificatesRequest) returns (CertificatesResponse) {
	}

	// ListCertificates returns stream of Certificates
	rpc ListCertificates(ListByIssuerRequest) returns (CertificatesResponse) {
	}

	// ListRevokedCertificates returns stream of Revoked Certificates
	rpc ListRevokedCertificates(ListByIssuerRequest) returns (RevokedCertificatesResponse) {
	}

	// UpdateCertificateLabel returns the updated certificate
	rpc UpdateCertificateLabel(UpdateCertificateLabelRequest) returns (CertificateResponse) {
	}

	// ListDelegatedIssuers returns the delegated issuing CAs
	rpc ListDelegatedIssuers(ListIssuersRequest) returns (IssuersInfoResponse) {
	}

	// RegisterDelegatedIssuer creates new delegate issuer.
	// NOTE: the key and CSR is generated by the server, and request field must be empty
	rpc RegisterDelegatedIssuer(SignCertificateRequest) returns (IssuerInfo) {
	}

	// ArchiveDelegatedIssuer archives a delegated issuer.
	rpc ArchiveDelegatedIssuer(IssuerInfoRequest) returns (IssuerInfo) {
	}

	// TODO: Destroy key of the archived issuer

	// RegisterProfile registers the certificate profile
	rpc RegisterProfile(RegisterProfileRequest) returns (CertProfile) {
	}
}

message CertProfileInfoRequest {
	string Label = 1;
}

message IssuerInfoRequest {
	string Label = 1;
	// IKID specifies Issuer Key ID to search
	string IKID = 2;
}

// CertificateBundle provides certificate and its issuers
message CertificateBundle {
	// Certificate provides the certificate in PEM format
	string Certificate = 1;
	// Intermediates provides the intermediate CA certificates bundle in PEM format
	string Intermediates = 2;
	// Root provides the Root CA certifica in PEM format
	string Root = 3;
}

enum IssuerStatus {
	ARCHIVED = 0;
	ACTIVE = 1;
}

// IssuerInfo provides Issuer information
message IssuerInfo {
	// Id of the issuer. This field is used only with delegated issuers
	uint64 ID = 1;
	// Label specifies the Issuer's label
	string Label = 2;
	// Certificate provides the certificate in PEM format
	string Certificate = 3;
	// Intermediates provides the intermediate CA certificates bundle in PEM format
	string Intermediates = 4;
	// Root provides the Root CA certificate in PEM format
	string Root = 5;
	// Profiles specifies the list of profiles the issuer supports
	repeated string Profiles = 6;
	// Type of the issuer
	string Type = 7;
	// Status of the issuer
	IssuerStatus Status = 8;
}

// IssuersInfoResponse provides response for Issuers Info request
message IssuersInfoResponse {
	repeated IssuerInfo Issuers = 1;
}

// SignCertificateRequest specifies certificate sign request
message SignCertificateRequest {
	// RequestFormat provides the certificate request format: CSR, CMS
	EncodingFormat RequestFormat = 1;
	// Request provides the certificate request
	bytes Request = 2;
	// Profile specifies the certificate profile: client, server, spiffe
	string Profile = 3;
	// IssuerLabel specifies which Issuer to be appointed to sign the request
	string IssuerLabel = 4;
	// San specifies Subject Alternative Names
	repeated string SAN = 5;
	// Subject specifies name
	X509Subject Subject = 6;
	// Token provides the authorization token for the request
	string Token = 7;
	// OrgID provides the ID of Organization that certificate belongs to
	uint64 OrgID = 8;
	// NotBefore is the time when the validity period starts
	string NotBefore = 9;
	// NotAfter is the time when the validity period ends
	string NotAfter = 10;
	// Extensions specifies additional extensions to include in certificate
	repeated X509Extension Extensions = 11;
	// Label is provided by a client
	string Label = 12;
	// Metadata is provided by a client
	map<string, string> Metadata = 13;
}

// UpdateCertificateLabelRequest specifies certificate label update request
message UpdateCertificateLabelRequest {
	// Id specifies certificate ID.
	uint64 ID = 1;
	// Label is provided by a client
	string Label = 2;
}

// GetCertificateRequest specifies certificate request by ID or issuer key identifier
message GetCertificateRequest {
	// ID specifies certificate ID.
	// If it's not set, then SKID must be provided
	uint64 ID = 1;
	// SKID specifies Subject Key ID to search
	string SKID = 2;
	// IssuerSerial specifies Issuer Key ID and certificate serial number to search
	IssuerSerial IssuerSerial = 3;
}

// GetCrlRequest specifies CRL request by IKID
message GetCrlRequest {
	// IKID specifies Issuer
	string IKID = 1;
}

message ListByIssuerRequest {
	// Limit specifies the limit to return
	int64 Limit = 1; 
	// After specifies certificate ID to start after
	uint64 After = 2;
	// IKID specifies Issuer Key ID to search
	string IKID = 3;
}

// RevokeCertificateRequest specifies revocation request
message RevokeCertificateRequest {
	// Id specifies certificate ID.
	// If it's not set, then SKID must be provided
	uint64 ID = 1;
	// SKID specifies Subject Key ID to search
	string SKID = 2;
	// IssuerSerial specifies Issuer Key ID and certificate serial number to search
	IssuerSerial IssuerSerial = 3;
	// Reason for revocation
	Reason Reason = 4;
}

// CertificateResponse returns Certificate
message CertificateResponse {
	Certificate Certificate = 1;
}

// CertificatesResponse returns Certificates list
message CertificatesResponse {
	repeated Certificate Certificates = 1;
}

// RevokedCertificateResponse returns Revoked Certificate
message RevokedCertificateResponse {
	RevokedCertificate Revoked = 1;
}

// RevokedCertificatesResponse returns Revoked Certificates list
message RevokedCertificatesResponse {
	repeated RevokedCertificate RevokedCertificates = 1;
}

// PublishCrlsRequest allows to publish CRLs on demand
message PublishCrlsRequest {
	// IKID specifies Issuer, or empty to publish for all issuers
	string IKID = 1;
}

// CrlsResponse returns published CRLs
message CrlsResponse {
	repeated Crl Crls = 1;
}

// CrlResponse returns CRL
message CrlResponse {
	Crl Crl = 1;
}

message OCSPRequest {
	// Der provides DER encoded request
	bytes Der = 1;
}

// OCSPResponse returns OCSP
message OCSPResponse {
	// Der provides DER encoded response
	bytes Der = 1;
}

// ListOrgsCertificatesRequest specifies a certificates request by Org ID
message ListOrgCertificatesRequest {
	// Limit specifies the limit to return
	int64 Limit = 1; 
	// After specifies certificate ID to start after
	uint64 After = 2;
	// OrgID specifies the Org ID.
	uint64 OrgID = 3;
}

// RegisterProfileRequest specifies a request to register a persisted profile
message RegisterProfileRequest {
	// Label provides Profile label
	string Label = 1;
	// Config is yaml encoded Profile configuration
	bytes Config = 2;
}

message ListIssuersRequest {
	// Limit specifies the limit to return
	int64 Limit = 1; 
	// After specifies certificate ID to start after
	uint64 After = 2;
	// Bundle specifies to return entire chain
	bool Bundle = 3;
}