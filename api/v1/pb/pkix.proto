syntax = "proto3";
package pb;

option go_package = "github.com/effective-security/trusty/api/v1/pb";

import "google/protobuf/timestamp.proto";
// for grpc-gateway
import "google/api/annotations.proto";

enum Trust {
	Any = 0;  // default
	Public = 1;
	Private = 2;
}

enum EncodingFormat {
	PEM = 0; // default, PEM encoded
	DER = 1;
	PKCS7 = 2;
}

// Reason specifies Certificate Revocation Reason from RFC 5280
// CRLReason ::= ENUMERATED {
//        unspecified             (0),
//        keyCompromise           (1),
//        cACompromise            (2),
//        affiliationChanged      (3),
//        superseded              (4),
//        cessationOfOperation    (5),
//        certificateHold         (6),
//             -- value 7 is not used
//        removeFromCRL           (8),
//        privilegeWithdrawn      (9),
//        aACompromise           (10) }
enum Reason {
	UNSPECIFIED = 0;
	KEY_COMPROMISE = 1;
	CA_COMPROMISE = 2;
	AFFILIATION_CHANGED = 3;
	SUPERSEDED = 4;
	CESSATION_OF_OPERATION = 5;
	CERTIFICATE_HOLD = 6;
	REMOVE_FROM_CRL = 8;
	PRIVILEGE_WITHDRAWN = 9;
	AA_COMPROMISE = 10;
}

// Root provides X509 Root Cert information
message RootCertificate  {
	// Id of the certificate
	uint64 id = 1;
	// Skid provides Subject Key Identifier
	string skid = 2;
	// NotBefore is the time when the validity period starts
	google.protobuf.Timestamp not_before = 3 [json_name="not_before"];
	// NotAfter is the time when the validity period ends
	google.protobuf.Timestamp not_after = 4 [json_name="not_after"];
	// Subject name
	string subject = 5;
	// SHA256 thnumbprint of the cert
	string sha256 =6;
	// Trust scope
	Trust trust = 7;
	// PEM encoded certificate
	string pem =8;
}

// Certificate provides X509 Certificate information
message Certificate  {
	// Id of the certificate
	uint64 id = 1;
	// OrgId of the certificate, only used with Org scope
	uint64 org_id = 2 [json_name="org_id"];
	// Skid provides Subject Key Identifier
	string skid = 3;
	// Ikid provides Issuer Key Identifier
	string ikid = 4;
	// SerialNumber provides Serial Number
	string serial_number = 5;
	// NotBefore is the time when the validity period starts
	google.protobuf.Timestamp not_before = 6 [json_name="not_before"];
	// NotAfter is the time when the validity period starts
	google.protobuf.Timestamp not_after = 7 [json_name="not_after"];
	// Subject name
	string subject = 8;
	// Issuer name
	string issuer = 9;
	// SHA256 thnumbprint of the cert
	string sha256 = 10;
	// Profile of the certificate
	string profile = 11;
	// Pem encoded certificate
	string pem = 12;
	// IssuersPem provides PEM encoded issuers
	string issuers_pem = 13 [json_name="issuers_pem"];
	// Locations of published certificate
	repeated string locations = 14;
	// Label of the certificate provided by the client
	string label = 15;
	// Metadata of the certificate provided by the client
	map<string, string> metadata = 16;
}

// RevokedCertificate provides X509 Cert information
message RevokedCertificate {
	Certificate certificate = 1;
	google.protobuf.Timestamp revoked_at = 2 [json_name="revoked_at"];
	Reason reason = 3;
}

// Crl provides X509 CRL information
message Crl  {
	// Id of the CRL
	uint64 id = 1;
	// Ikid provides Issuer Key Identifier
	string ikid = 2;
	// ThisUpdate is the time when the CRL was issued
	google.protobuf.Timestamp this_update = 3 [json_name="this_update"];
	// NextUpdate is the time for the next update
	google.protobuf.Timestamp next_update = 4 [json_name="next_update"];
	// Issuer name
	string issuer = 5;
	// PEM encoded CRL
	string pem =6;
}

// X509Name specifies X509 Name
message X509Name {
	string country = 1;
	string state = 2;
	string locality = 3;
	string organisation = 4;
	string organisational_unit = 5;
}

// X509Subject specifies X509 Subject
message X509Subject {
	string common_name = 1;
	repeated X509Name names = 2;
	string serial_number = 3;
}

// CAConstraint specifies various CA constraints on the signed certificate.
// CAConstraint would verify against (and override) the CA
// extensions in the given CSR.
message CAConstraint {
	bool is_ca = 1;
	int32 max_path_len = 2;
}

message CSRAllowedFields {
	bool subject = 1;
	bool dns = 2;
	bool ip = 3;
	bool email = 4;
	bool uri = 5;
}

message CertificatePolicyQualifier {
	string type  = 1;
	string value = 2;
}

message CertificatePolicy {
	// Id is OID of Certificate Policy
	string id = 1;
	repeated CertificatePolicyQualifier qualifiers = 2;
}

// CertProfile provides certificate profile
message CertProfile {
	string label = 1;
	string issuer_label = 2;
	string description = 3;

	// Usage provides a list key usages
	repeated string usages = 4;

	CAConstraint ca_constraint  = 5;
	bool ocsp_no_check  = 6;

	string expiry = 7;
	string backdate = 8;

	repeated string allowed_extensions = 9;

	// AllowedNames specifies a RegExp to check for allowed names.
	// If not provided, then all values are allowed
	string allowed_names = 10;

	// AllowedDns specifies a RegExp to check for allowed DNS.
	// If not provided, then all values are allowed
	string allowed_dns = 11;

	// AllowedEmail specifies a RegExp to check for allowed email.
	// If not provided, then all values are allowed
	string allowed_email = 12;

	// AllowedUri specifies a RegExp to check for allowed URI.
	// If not provided, then all values are allowed
	string allowed_uri = 13;

	// AllowedFields provides booleans for fields in the CSR.
	// If a AllowedFields is not present in a CertProfile,
	// all of these fields may be copied from the CSR into the signed certificate.
	// If a AllowedFields *is* present in a CertProfile,
	// only those fields with a `true` value in the AllowedFields may
	// be copied from the CSR to the signed certificate.
	// Note that some of these fields, like Subject, can be provided or
	// partially provided through the API.
	// Since API clients are expected to be trusted, but CSRs are not, fields
	// provided through the API are not subject to validation through this
	// mechanism.
	CSRAllowedFields allowed_fields = 14;

	repeated CertificatePolicy policies = 15;

	// PoliciesCritical specifies to mark Policies as Critical extension
	bool policies_critical = 16;

	repeated string allowed_roles = 17;
	repeated string denied_roles = 18;
}

message IssuerSerial {
	// Ikid provides Issuer Key Identifier
	string ikid = 1;
	
	// SerialNumber provides certificate's serial number
	string serial_number = 2;
}

// X509Extension represents a raw extension to be included in the certificate.  The
// "value" field must be hex encoded.
message X509Extension {
	// Id is the extension OID
	repeated int64 id = 1;
	// Critical flag
	bool critical = 2;
	// Value is base64 encoded extension value
	string value = 3;
}