// Code generated by protoc-gen-go-proxy. DO NOT EDIT.
// source: ca.proto

package proxypb

import (
	"context"

	"github.com/effective-security/porto/pkg/retriable"
	"github.com/effective-security/porto/xhttp/correlation"
	"github.com/effective-security/porto/xhttp/httperror"
	"github.com/effective-security/trusty/api/v1/pb"
	"google.golang.org/grpc"
)

type proxyCAServer struct {
	srv pb.CAServer
}

type proxyCAClient struct {
	remote   pb.CAClient
	callOpts []grpc.CallOption
}

type postproxyCAClient struct {
	client retriable.PostRequester
}

// CAServerToClient returns pb.CAClient
func CAServerToClient(srv pb.CAServer) pb.CAClient {
	return &proxyCAServer{srv}
}

// NewCAClient returns instance of the CAClient
func NewCAClient(conn *grpc.ClientConn, callOpts []grpc.CallOption) pb.CAServer {
	return &proxyCAClient{
		remote:   pb.NewCAClient(conn),
		callOpts: callOpts,
	}
}

// NewCAClientFromProxy returns instance of CAClient
func NewCAClientFromProxy(proxy pb.CAClient) pb.CAServer {
	return &proxyCAClient{
		remote: proxy,
	}
}

// NewCAClientFromProxy returns instance of CAClient
func NewHTTPCAClient(client retriable.PostRequester) pb.CAServer {
	return &postproxyCAClient{
		client: client,
	}
}

// ProfileInfo returns the certificate profile info
func (s *proxyCAServer) ProfileInfo(ctx context.Context, req *pb.CertProfileInfoRequest, opts ...grpc.CallOption) (*pb.CertProfile, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.ProfileInfo(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ProfileInfo returns the certificate profile info
func (s *proxyCAClient) ProfileInfo(ctx context.Context, req *pb.CertProfileInfoRequest) (*pb.CertProfile, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.ProfileInfo(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ProfileInfo returns the certificate profile info
func (s *postproxyCAClient) ProfileInfo(ctx context.Context, req *pb.CertProfileInfoRequest) (*pb.CertProfile, error) {
	var res pb.CertProfile
	path := "/pb.CA/ProfileInfo"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// GetIssuer returns the issuing CA
func (s *proxyCAServer) GetIssuer(ctx context.Context, req *pb.IssuerInfoRequest, opts ...grpc.CallOption) (*pb.IssuerInfo, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.GetIssuer(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// GetIssuer returns the issuing CA
func (s *proxyCAClient) GetIssuer(ctx context.Context, req *pb.IssuerInfoRequest) (*pb.IssuerInfo, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.GetIssuer(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// GetIssuer returns the issuing CA
func (s *postproxyCAClient) GetIssuer(ctx context.Context, req *pb.IssuerInfoRequest) (*pb.IssuerInfo, error) {
	var res pb.IssuerInfo
	path := "/pb.CA/GetIssuer"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// ListIssuers returns the issuing CAs
func (s *proxyCAServer) ListIssuers(ctx context.Context, req *pb.ListIssuersRequest, opts ...grpc.CallOption) (*pb.IssuersInfoResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.ListIssuers(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListIssuers returns the issuing CAs
func (s *proxyCAClient) ListIssuers(ctx context.Context, req *pb.ListIssuersRequest) (*pb.IssuersInfoResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.ListIssuers(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListIssuers returns the issuing CAs
func (s *postproxyCAClient) ListIssuers(ctx context.Context, req *pb.ListIssuersRequest) (*pb.IssuersInfoResponse, error) {
	var res pb.IssuersInfoResponse
	path := "/pb.CA/ListIssuers"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// SignCertificate returns the certificate
func (s *proxyCAServer) SignCertificate(ctx context.Context, req *pb.SignCertificateRequest, opts ...grpc.CallOption) (*pb.CertificateResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.SignCertificate(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// SignCertificate returns the certificate
func (s *proxyCAClient) SignCertificate(ctx context.Context, req *pb.SignCertificateRequest) (*pb.CertificateResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.SignCertificate(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// SignCertificate returns the certificate
func (s *postproxyCAClient) SignCertificate(ctx context.Context, req *pb.SignCertificateRequest) (*pb.CertificateResponse, error) {
	var res pb.CertificateResponse
	path := "/pb.CA/SignCertificate"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// GetCertificate returns the certificate
func (s *proxyCAServer) GetCertificate(ctx context.Context, req *pb.GetCertificateRequest, opts ...grpc.CallOption) (*pb.CertificateResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.GetCertificate(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// GetCertificate returns the certificate
func (s *proxyCAClient) GetCertificate(ctx context.Context, req *pb.GetCertificateRequest) (*pb.CertificateResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.GetCertificate(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// GetCertificate returns the certificate
func (s *postproxyCAClient) GetCertificate(ctx context.Context, req *pb.GetCertificateRequest) (*pb.CertificateResponse, error) {
	var res pb.CertificateResponse
	path := "/pb.CA/GetCertificate"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// GetCRL returns the CRL
func (s *proxyCAServer) GetCRL(ctx context.Context, req *pb.GetCrlRequest, opts ...grpc.CallOption) (*pb.CrlResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.GetCRL(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// GetCRL returns the CRL
func (s *proxyCAClient) GetCRL(ctx context.Context, req *pb.GetCrlRequest) (*pb.CrlResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.GetCRL(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// GetCRL returns the CRL
func (s *postproxyCAClient) GetCRL(ctx context.Context, req *pb.GetCrlRequest) (*pb.CrlResponse, error) {
	var res pb.CrlResponse
	path := "/pb.CA/GetCRL"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// SignOCSP returns OCSP response
func (s *proxyCAServer) SignOCSP(ctx context.Context, req *pb.OCSPRequest, opts ...grpc.CallOption) (*pb.OCSPResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.SignOCSP(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// SignOCSP returns OCSP response
func (s *proxyCAClient) SignOCSP(ctx context.Context, req *pb.OCSPRequest) (*pb.OCSPResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.SignOCSP(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// SignOCSP returns OCSP response
func (s *postproxyCAClient) SignOCSP(ctx context.Context, req *pb.OCSPRequest) (*pb.OCSPResponse, error) {
	var res pb.OCSPResponse
	path := "/pb.CA/SignOCSP"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// RevokeCertificate returns the revoked certificate
func (s *proxyCAServer) RevokeCertificate(ctx context.Context, req *pb.RevokeCertificateRequest, opts ...grpc.CallOption) (*pb.RevokedCertificateResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.RevokeCertificate(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// RevokeCertificate returns the revoked certificate
func (s *proxyCAClient) RevokeCertificate(ctx context.Context, req *pb.RevokeCertificateRequest) (*pb.RevokedCertificateResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.RevokeCertificate(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// RevokeCertificate returns the revoked certificate
func (s *postproxyCAClient) RevokeCertificate(ctx context.Context, req *pb.RevokeCertificateRequest) (*pb.RevokedCertificateResponse, error) {
	var res pb.RevokedCertificateResponse
	path := "/pb.CA/RevokeCertificate"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// PublishCrls returns published CRLs
func (s *proxyCAServer) PublishCrls(ctx context.Context, req *pb.PublishCrlsRequest, opts ...grpc.CallOption) (*pb.CrlsResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.PublishCrls(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// PublishCrls returns published CRLs
func (s *proxyCAClient) PublishCrls(ctx context.Context, req *pb.PublishCrlsRequest) (*pb.CrlsResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.PublishCrls(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// PublishCrls returns published CRLs
func (s *postproxyCAClient) PublishCrls(ctx context.Context, req *pb.PublishCrlsRequest) (*pb.CrlsResponse, error) {
	var res pb.CrlsResponse
	path := "/pb.CA/PublishCrls"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// ListOrgCertificates returns the Org certificates
func (s *proxyCAServer) ListOrgCertificates(ctx context.Context, req *pb.ListOrgCertificatesRequest, opts ...grpc.CallOption) (*pb.CertificatesResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.ListOrgCertificates(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListOrgCertificates returns the Org certificates
func (s *proxyCAClient) ListOrgCertificates(ctx context.Context, req *pb.ListOrgCertificatesRequest) (*pb.CertificatesResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.ListOrgCertificates(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListOrgCertificates returns the Org certificates
func (s *postproxyCAClient) ListOrgCertificates(ctx context.Context, req *pb.ListOrgCertificatesRequest) (*pb.CertificatesResponse, error) {
	var res pb.CertificatesResponse
	path := "/pb.CA/ListOrgCertificates"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// ListCertificates returns stream of Certificates
func (s *proxyCAServer) ListCertificates(ctx context.Context, req *pb.ListByIssuerRequest, opts ...grpc.CallOption) (*pb.CertificatesResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.ListCertificates(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListCertificates returns stream of Certificates
func (s *proxyCAClient) ListCertificates(ctx context.Context, req *pb.ListByIssuerRequest) (*pb.CertificatesResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.ListCertificates(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListCertificates returns stream of Certificates
func (s *postproxyCAClient) ListCertificates(ctx context.Context, req *pb.ListByIssuerRequest) (*pb.CertificatesResponse, error) {
	var res pb.CertificatesResponse
	path := "/pb.CA/ListCertificates"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// ListRevokedCertificates returns stream of Revoked Certificates
func (s *proxyCAServer) ListRevokedCertificates(ctx context.Context, req *pb.ListByIssuerRequest, opts ...grpc.CallOption) (*pb.RevokedCertificatesResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.ListRevokedCertificates(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListRevokedCertificates returns stream of Revoked Certificates
func (s *proxyCAClient) ListRevokedCertificates(ctx context.Context, req *pb.ListByIssuerRequest) (*pb.RevokedCertificatesResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.ListRevokedCertificates(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListRevokedCertificates returns stream of Revoked Certificates
func (s *postproxyCAClient) ListRevokedCertificates(ctx context.Context, req *pb.ListByIssuerRequest) (*pb.RevokedCertificatesResponse, error) {
	var res pb.RevokedCertificatesResponse
	path := "/pb.CA/ListRevokedCertificates"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// UpdateCertificateLabel returns the updated certificate
func (s *proxyCAServer) UpdateCertificateLabel(ctx context.Context, req *pb.UpdateCertificateLabelRequest, opts ...grpc.CallOption) (*pb.CertificateResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.UpdateCertificateLabel(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// UpdateCertificateLabel returns the updated certificate
func (s *proxyCAClient) UpdateCertificateLabel(ctx context.Context, req *pb.UpdateCertificateLabelRequest) (*pb.CertificateResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.UpdateCertificateLabel(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// UpdateCertificateLabel returns the updated certificate
func (s *postproxyCAClient) UpdateCertificateLabel(ctx context.Context, req *pb.UpdateCertificateLabelRequest) (*pb.CertificateResponse, error) {
	var res pb.CertificateResponse
	path := "/pb.CA/UpdateCertificateLabel"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// ListDelegatedIssuers returns the delegated issuing CAs
func (s *proxyCAServer) ListDelegatedIssuers(ctx context.Context, req *pb.ListIssuersRequest, opts ...grpc.CallOption) (*pb.IssuersInfoResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.ListDelegatedIssuers(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListDelegatedIssuers returns the delegated issuing CAs
func (s *proxyCAClient) ListDelegatedIssuers(ctx context.Context, req *pb.ListIssuersRequest) (*pb.IssuersInfoResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.ListDelegatedIssuers(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ListDelegatedIssuers returns the delegated issuing CAs
func (s *postproxyCAClient) ListDelegatedIssuers(ctx context.Context, req *pb.ListIssuersRequest) (*pb.IssuersInfoResponse, error) {
	var res pb.IssuersInfoResponse
	path := "/pb.CA/ListDelegatedIssuers"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// RegisterDelegatedIssuer creates new delegate issuer.
// NOTE: the key and CSR is generated by the server, and request field must be empty
func (s *proxyCAServer) RegisterDelegatedIssuer(ctx context.Context, req *pb.SignCertificateRequest, opts ...grpc.CallOption) (*pb.IssuerInfo, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.RegisterDelegatedIssuer(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// RegisterDelegatedIssuer creates new delegate issuer.
// NOTE: the key and CSR is generated by the server, and request field must be empty
func (s *proxyCAClient) RegisterDelegatedIssuer(ctx context.Context, req *pb.SignCertificateRequest) (*pb.IssuerInfo, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.RegisterDelegatedIssuer(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// RegisterDelegatedIssuer creates new delegate issuer.
// NOTE: the key and CSR is generated by the server, and request field must be empty
func (s *postproxyCAClient) RegisterDelegatedIssuer(ctx context.Context, req *pb.SignCertificateRequest) (*pb.IssuerInfo, error) {
	var res pb.IssuerInfo
	path := "/pb.CA/RegisterDelegatedIssuer"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// ArchiveDelegatedIssuer archives a delegated issuer.
func (s *proxyCAServer) ArchiveDelegatedIssuer(ctx context.Context, req *pb.IssuerInfoRequest, opts ...grpc.CallOption) (*pb.IssuerInfo, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.ArchiveDelegatedIssuer(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ArchiveDelegatedIssuer archives a delegated issuer.
func (s *proxyCAClient) ArchiveDelegatedIssuer(ctx context.Context, req *pb.IssuerInfoRequest) (*pb.IssuerInfo, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.ArchiveDelegatedIssuer(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// ArchiveDelegatedIssuer archives a delegated issuer.
func (s *postproxyCAClient) ArchiveDelegatedIssuer(ctx context.Context, req *pb.IssuerInfoRequest) (*pb.IssuerInfo, error) {
	var res pb.IssuerInfo
	path := "/pb.CA/ArchiveDelegatedIssuer"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// RegisterProfile registers the certificate profile
func (s *proxyCAServer) RegisterProfile(ctx context.Context, req *pb.RegisterProfileRequest, opts ...grpc.CallOption) (*pb.CertProfile, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.RegisterProfile(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// RegisterProfile registers the certificate profile
func (s *proxyCAClient) RegisterProfile(ctx context.Context, req *pb.RegisterProfileRequest) (*pb.CertProfile, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.RegisterProfile(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// RegisterProfile registers the certificate profile
func (s *postproxyCAClient) RegisterProfile(ctx context.Context, req *pb.RegisterProfileRequest) (*pb.CertProfile, error) {
	var res pb.CertProfile
	path := "/pb.CA/RegisterProfile"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}
