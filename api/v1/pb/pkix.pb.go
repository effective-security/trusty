// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.6.1
// source: pkix.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/gogo/googleapis/google/api"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trust int32

const (
	Trust_Any     Trust = 0 // default
	Trust_Public  Trust = 1
	Trust_Private Trust = 2
)

// Enum value maps for Trust.
var (
	Trust_name = map[int32]string{
		0: "Any",
		1: "Public",
		2: "Private",
	}
	Trust_value = map[string]int32{
		"Any":     0,
		"Public":  1,
		"Private": 2,
	}
)

func (x Trust) Enum() *Trust {
	p := new(Trust)
	*p = x
	return p
}

func (x Trust) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trust) Descriptor() protoreflect.EnumDescriptor {
	return file_pkix_proto_enumTypes[0].Descriptor()
}

func (Trust) Type() protoreflect.EnumType {
	return &file_pkix_proto_enumTypes[0]
}

func (x Trust) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trust.Descriptor instead.
func (Trust) EnumDescriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{0}
}

type EncodingFormat int32

const (
	EncodingFormat_PEM   EncodingFormat = 0 // default, PEM encoded
	EncodingFormat_DER   EncodingFormat = 1
	EncodingFormat_PKCS7 EncodingFormat = 2
)

// Enum value maps for EncodingFormat.
var (
	EncodingFormat_name = map[int32]string{
		0: "PEM",
		1: "DER",
		2: "PKCS7",
	}
	EncodingFormat_value = map[string]int32{
		"PEM":   0,
		"DER":   1,
		"PKCS7": 2,
	}
)

func (x EncodingFormat) Enum() *EncodingFormat {
	p := new(EncodingFormat)
	*p = x
	return p
}

func (x EncodingFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pkix_proto_enumTypes[1].Descriptor()
}

func (EncodingFormat) Type() protoreflect.EnumType {
	return &file_pkix_proto_enumTypes[1]
}

func (x EncodingFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingFormat.Descriptor instead.
func (EncodingFormat) EnumDescriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{1}
}

// Reason specifies Certificate Revocation Reason from RFC 5280
// CRLReason ::= ENUMERATED {
//        unspecified             (0),
//        keyCompromise           (1),
//        cACompromise            (2),
//        affiliationChanged      (3),
//        superseded              (4),
//        cessationOfOperation    (5),
//        certificateHold         (6),
//             -- value 7 is not used
//        removeFromCRL           (8),
//        privilegeWithdrawn      (9),
//        aACompromise           (10) }
type Reason int32

const (
	Reason_UNSPECIFIED            Reason = 0
	Reason_KEY_COMPROMISE         Reason = 1
	Reason_CA_COMPROMISE          Reason = 2
	Reason_AFFILIATION_CHANGED    Reason = 3
	Reason_SUPERSEDED             Reason = 4
	Reason_CESSATION_OF_OPERATION Reason = 5
	Reason_CERTIFICATE_HOLD       Reason = 6
	Reason_REMOVE_FROM_CRL        Reason = 8
	Reason_PRIVILEGE_WITHDRAWN    Reason = 9
	Reason_AA_COMPROMISE          Reason = 10
)

// Enum value maps for Reason.
var (
	Reason_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "KEY_COMPROMISE",
		2:  "CA_COMPROMISE",
		3:  "AFFILIATION_CHANGED",
		4:  "SUPERSEDED",
		5:  "CESSATION_OF_OPERATION",
		6:  "CERTIFICATE_HOLD",
		8:  "REMOVE_FROM_CRL",
		9:  "PRIVILEGE_WITHDRAWN",
		10: "AA_COMPROMISE",
	}
	Reason_value = map[string]int32{
		"UNSPECIFIED":            0,
		"KEY_COMPROMISE":         1,
		"CA_COMPROMISE":          2,
		"AFFILIATION_CHANGED":    3,
		"SUPERSEDED":             4,
		"CESSATION_OF_OPERATION": 5,
		"CERTIFICATE_HOLD":       6,
		"REMOVE_FROM_CRL":        8,
		"PRIVILEGE_WITHDRAWN":    9,
		"AA_COMPROMISE":          10,
	}
)

func (x Reason) Enum() *Reason {
	p := new(Reason)
	*p = x
	return p
}

func (x Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_pkix_proto_enumTypes[2].Descriptor()
}

func (Reason) Type() protoreflect.EnumType {
	return &file_pkix_proto_enumTypes[2]
}

func (x Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reason.Descriptor instead.
func (Reason) EnumDescriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{2}
}

// Root provides X509 Root Cert information
type RootCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the certificate
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Skid provides Subject Key Identifier
	Skid string `protobuf:"bytes,2,opt,name=skid,proto3" json:"skid,omitempty"`
	// NotBefore is the time when the validity period starts
	NotBefore *timestamp.Timestamp `protobuf:"bytes,3,opt,name=not_before,proto3" json:"not_before,omitempty"`
	// NotAfter is the time when the validity period ends
	NotAfter *timestamp.Timestamp `protobuf:"bytes,4,opt,name=not_after,proto3" json:"not_after,omitempty"`
	// Subject name
	Subject string `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	// SHA256 thnumbprint of the cert
	Sha256 string `protobuf:"bytes,6,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// Trust scope
	Trust Trust `protobuf:"varint,7,opt,name=trust,proto3,enum=pb.Trust" json:"trust,omitempty"`
	// PEM encoded certificate
	Pem string `protobuf:"bytes,8,opt,name=pem,proto3" json:"pem,omitempty"`
}

func (x *RootCertificate) Reset() {
	*x = RootCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootCertificate) ProtoMessage() {}

func (x *RootCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootCertificate.ProtoReflect.Descriptor instead.
func (*RootCertificate) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{0}
}

func (x *RootCertificate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RootCertificate) GetSkid() string {
	if x != nil {
		return x.Skid
	}
	return ""
}

func (x *RootCertificate) GetNotBefore() *timestamp.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *RootCertificate) GetNotAfter() *timestamp.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *RootCertificate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *RootCertificate) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *RootCertificate) GetTrust() Trust {
	if x != nil {
		return x.Trust
	}
	return Trust_Any
}

func (x *RootCertificate) GetPem() string {
	if x != nil {
		return x.Pem
	}
	return ""
}

// Certificate provides X509 Certificate information
type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the certificate
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// OrgId of the certificate, only used with Org scope
	OrgId uint64 `protobuf:"varint,2,opt,name=org_id,proto3" json:"org_id,omitempty"`
	// Skid provides Subject Key Identifier
	Skid string `protobuf:"bytes,3,opt,name=skid,proto3" json:"skid,omitempty"`
	// Ikid provides Issuer Key Identifier
	Ikid string `protobuf:"bytes,4,opt,name=ikid,proto3" json:"ikid,omitempty"`
	// SerialNumber provides Serial Number
	SerialNumber string `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// NotBefore is the time when the validity period starts
	NotBefore *timestamp.Timestamp `protobuf:"bytes,6,opt,name=not_before,proto3" json:"not_before,omitempty"`
	// NotAfter is the time when the validity period starts
	NotAfter *timestamp.Timestamp `protobuf:"bytes,7,opt,name=not_after,proto3" json:"not_after,omitempty"`
	// Subject name
	Subject string `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
	// Issuer name
	Issuer string `protobuf:"bytes,9,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// SHA256 thnumbprint of the cert
	Sha256 string `protobuf:"bytes,10,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// Profile of the certificate
	Profile string `protobuf:"bytes,11,opt,name=profile,proto3" json:"profile,omitempty"`
	// Pem encoded certificate
	Pem string `protobuf:"bytes,12,opt,name=pem,proto3" json:"pem,omitempty"`
	// IssuersPem provides PEM encoded issuers
	IssuersPem string `protobuf:"bytes,13,opt,name=issuers_pem,proto3" json:"issuers_pem,omitempty"`
	// Locations of published certificate
	Locations []string `protobuf:"bytes,14,rep,name=locations,proto3" json:"locations,omitempty"`
	// Label of the certificate provided by the client
	Label string `protobuf:"bytes,15,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{1}
}

func (x *Certificate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Certificate) GetOrgId() uint64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *Certificate) GetSkid() string {
	if x != nil {
		return x.Skid
	}
	return ""
}

func (x *Certificate) GetIkid() string {
	if x != nil {
		return x.Ikid
	}
	return ""
}

func (x *Certificate) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Certificate) GetNotBefore() *timestamp.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *Certificate) GetNotAfter() *timestamp.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *Certificate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Certificate) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Certificate) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *Certificate) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *Certificate) GetPem() string {
	if x != nil {
		return x.Pem
	}
	return ""
}

func (x *Certificate) GetIssuersPem() string {
	if x != nil {
		return x.IssuersPem
	}
	return ""
}

func (x *Certificate) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *Certificate) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// RevokedCertificate provides X509 Cert information
type RevokedCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *Certificate         `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	RevokedAt   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=revoked_at,proto3" json:"revoked_at,omitempty"`
	Reason      Reason               `protobuf:"varint,3,opt,name=reason,proto3,enum=pb.Reason" json:"reason,omitempty"`
}

func (x *RevokedCertificate) Reset() {
	*x = RevokedCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokedCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokedCertificate) ProtoMessage() {}

func (x *RevokedCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokedCertificate.ProtoReflect.Descriptor instead.
func (*RevokedCertificate) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{2}
}

func (x *RevokedCertificate) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *RevokedCertificate) GetRevokedAt() *timestamp.Timestamp {
	if x != nil {
		return x.RevokedAt
	}
	return nil
}

func (x *RevokedCertificate) GetReason() Reason {
	if x != nil {
		return x.Reason
	}
	return Reason_UNSPECIFIED
}

// Crl provides X509 CRL information
type Crl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the CRL
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Ikid provides Issuer Key Identifier
	Ikid string `protobuf:"bytes,2,opt,name=ikid,proto3" json:"ikid,omitempty"`
	// ThisUpdate is the time when the CRL was issued
	ThisUpdate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=this_update,proto3" json:"this_update,omitempty"`
	// NextUpdate is the time for the next update
	NextUpdate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=next_update,proto3" json:"next_update,omitempty"`
	// Issuer name
	Issuer string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// PEM encoded CRL
	Pem string `protobuf:"bytes,6,opt,name=pem,proto3" json:"pem,omitempty"`
}

func (x *Crl) Reset() {
	*x = Crl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crl) ProtoMessage() {}

func (x *Crl) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crl.ProtoReflect.Descriptor instead.
func (*Crl) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{3}
}

func (x *Crl) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Crl) GetIkid() string {
	if x != nil {
		return x.Ikid
	}
	return ""
}

func (x *Crl) GetThisUpdate() *timestamp.Timestamp {
	if x != nil {
		return x.ThisUpdate
	}
	return nil
}

func (x *Crl) GetNextUpdate() *timestamp.Timestamp {
	if x != nil {
		return x.NextUpdate
	}
	return nil
}

func (x *Crl) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Crl) GetPem() string {
	if x != nil {
		return x.Pem
	}
	return ""
}

// X509Name specifies X509 Name
type X509Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country            string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	State              string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Locality           string `protobuf:"bytes,3,opt,name=locality,proto3" json:"locality,omitempty"`
	Organisation       string `protobuf:"bytes,4,opt,name=organisation,proto3" json:"organisation,omitempty"`
	OrganisationalUnit string `protobuf:"bytes,5,opt,name=organisational_unit,json=organisationalUnit,proto3" json:"organisational_unit,omitempty"`
}

func (x *X509Name) Reset() {
	*x = X509Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Name) ProtoMessage() {}

func (x *X509Name) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Name.ProtoReflect.Descriptor instead.
func (*X509Name) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{4}
}

func (x *X509Name) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *X509Name) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *X509Name) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *X509Name) GetOrganisation() string {
	if x != nil {
		return x.Organisation
	}
	return ""
}

func (x *X509Name) GetOrganisationalUnit() string {
	if x != nil {
		return x.OrganisationalUnit
	}
	return ""
}

// X509Subject specifies X509 Subject
type X509Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonName   string      `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Names        []*X509Name `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	SerialNumber string      `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *X509Subject) Reset() {
	*x = X509Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Subject) ProtoMessage() {}

func (x *X509Subject) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Subject.ProtoReflect.Descriptor instead.
func (*X509Subject) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{5}
}

func (x *X509Subject) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *X509Subject) GetNames() []*X509Name {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *X509Subject) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

// CAConstraint specifies various CA constraints on the signed certificate.
// CAConstraint would verify against (and override) the CA
// extensions in the given CSR.
type CAConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCa       bool  `protobuf:"varint,1,opt,name=is_ca,json=isCa,proto3" json:"is_ca,omitempty"`
	MaxPathLen int32 `protobuf:"varint,2,opt,name=max_path_len,json=maxPathLen,proto3" json:"max_path_len,omitempty"`
}

func (x *CAConstraint) Reset() {
	*x = CAConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAConstraint) ProtoMessage() {}

func (x *CAConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAConstraint.ProtoReflect.Descriptor instead.
func (*CAConstraint) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{6}
}

func (x *CAConstraint) GetIsCa() bool {
	if x != nil {
		return x.IsCa
	}
	return false
}

func (x *CAConstraint) GetMaxPathLen() int32 {
	if x != nil {
		return x.MaxPathLen
	}
	return 0
}

type CSRAllowedFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject bool `protobuf:"varint,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Dns     bool `protobuf:"varint,2,opt,name=dns,proto3" json:"dns,omitempty"`
	Ip      bool `protobuf:"varint,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Email   bool `protobuf:"varint,4,opt,name=email,proto3" json:"email,omitempty"`
	Uri     bool `protobuf:"varint,5,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *CSRAllowedFields) Reset() {
	*x = CSRAllowedFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRAllowedFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRAllowedFields) ProtoMessage() {}

func (x *CSRAllowedFields) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRAllowedFields.ProtoReflect.Descriptor instead.
func (*CSRAllowedFields) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{7}
}

func (x *CSRAllowedFields) GetSubject() bool {
	if x != nil {
		return x.Subject
	}
	return false
}

func (x *CSRAllowedFields) GetDns() bool {
	if x != nil {
		return x.Dns
	}
	return false
}

func (x *CSRAllowedFields) GetIp() bool {
	if x != nil {
		return x.Ip
	}
	return false
}

func (x *CSRAllowedFields) GetEmail() bool {
	if x != nil {
		return x.Email
	}
	return false
}

func (x *CSRAllowedFields) GetUri() bool {
	if x != nil {
		return x.Uri
	}
	return false
}

type CertificatePolicyQualifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CertificatePolicyQualifier) Reset() {
	*x = CertificatePolicyQualifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificatePolicyQualifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificatePolicyQualifier) ProtoMessage() {}

func (x *CertificatePolicyQualifier) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificatePolicyQualifier.ProtoReflect.Descriptor instead.
func (*CertificatePolicyQualifier) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{8}
}

func (x *CertificatePolicyQualifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CertificatePolicyQualifier) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CertificatePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is OID of Certificate Policy
	Id         string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Qualifiers []*CertificatePolicyQualifier `protobuf:"bytes,2,rep,name=qualifiers,proto3" json:"qualifiers,omitempty"`
}

func (x *CertificatePolicy) Reset() {
	*x = CertificatePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificatePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificatePolicy) ProtoMessage() {}

func (x *CertificatePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificatePolicy.ProtoReflect.Descriptor instead.
func (*CertificatePolicy) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{9}
}

func (x *CertificatePolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CertificatePolicy) GetQualifiers() []*CertificatePolicyQualifier {
	if x != nil {
		return x.Qualifiers
	}
	return nil
}

// CertProfile provides certificate profile
type CertProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	IssuerLabel string `protobuf:"bytes,2,opt,name=issuer_label,json=issuerLabel,proto3" json:"issuer_label,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Usage provides a list key usages
	Usages            []string      `protobuf:"bytes,4,rep,name=usages,proto3" json:"usages,omitempty"`
	CaConstraint      *CAConstraint `protobuf:"bytes,5,opt,name=ca_constraint,json=caConstraint,proto3" json:"ca_constraint,omitempty"`
	OcspNoCheck       bool          `protobuf:"varint,6,opt,name=ocsp_no_check,json=ocspNoCheck,proto3" json:"ocsp_no_check,omitempty"`
	Expiry            string        `protobuf:"bytes,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Backdate          string        `protobuf:"bytes,8,opt,name=backdate,proto3" json:"backdate,omitempty"`
	AllowedExtensions []string      `protobuf:"bytes,9,rep,name=allowed_extensions,json=allowedExtensions,proto3" json:"allowed_extensions,omitempty"`
	// AllowedNames specifies a RegExp to check for allowed names.
	// If not provided, then all values are allowed
	AllowedNames string `protobuf:"bytes,10,opt,name=allowed_names,json=allowedNames,proto3" json:"allowed_names,omitempty"`
	// AllowedDns specifies a RegExp to check for allowed DNS.
	// If not provided, then all values are allowed
	AllowedDns string `protobuf:"bytes,11,opt,name=allowed_dns,json=allowedDns,proto3" json:"allowed_dns,omitempty"`
	// AllowedEmail specifies a RegExp to check for allowed email.
	// If not provided, then all values are allowed
	AllowedEmail string `protobuf:"bytes,12,opt,name=allowed_email,json=allowedEmail,proto3" json:"allowed_email,omitempty"`
	// AllowedUri specifies a RegExp to check for allowed URI.
	// If not provided, then all values are allowed
	AllowedUri string `protobuf:"bytes,13,opt,name=allowed_uri,json=allowedUri,proto3" json:"allowed_uri,omitempty"`
	// AllowedFields provides booleans for fields in the CSR.
	// If a AllowedFields is not present in a CertProfile,
	// all of these fields may be copied from the CSR into the signed certificate.
	// If a AllowedFields *is* present in a CertProfile,
	// only those fields with a `true` value in the AllowedFields may
	// be copied from the CSR to the signed certificate.
	// Note that some of these fields, like Subject, can be provided or
	// partially provided through the API.
	// Since API clients are expected to be trusted, but CSRs are not, fields
	// provided through the API are not subject to validation through this
	// mechanism.
	AllowedFields *CSRAllowedFields    `protobuf:"bytes,14,opt,name=allowed_fields,json=allowedFields,proto3" json:"allowed_fields,omitempty"`
	Policies      []*CertificatePolicy `protobuf:"bytes,15,rep,name=policies,proto3" json:"policies,omitempty"`
	// PoliciesCritical specifies to mark Policies as Critical extension
	PoliciesCritical bool     `protobuf:"varint,16,opt,name=policies_critical,json=policiesCritical,proto3" json:"policies_critical,omitempty"`
	AllowedRoles     []string `protobuf:"bytes,17,rep,name=allowed_roles,json=allowedRoles,proto3" json:"allowed_roles,omitempty"`
	DeniedRoles      []string `protobuf:"bytes,18,rep,name=denied_roles,json=deniedRoles,proto3" json:"denied_roles,omitempty"`
}

func (x *CertProfile) Reset() {
	*x = CertProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertProfile) ProtoMessage() {}

func (x *CertProfile) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertProfile.ProtoReflect.Descriptor instead.
func (*CertProfile) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{10}
}

func (x *CertProfile) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CertProfile) GetIssuerLabel() string {
	if x != nil {
		return x.IssuerLabel
	}
	return ""
}

func (x *CertProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CertProfile) GetUsages() []string {
	if x != nil {
		return x.Usages
	}
	return nil
}

func (x *CertProfile) GetCaConstraint() *CAConstraint {
	if x != nil {
		return x.CaConstraint
	}
	return nil
}

func (x *CertProfile) GetOcspNoCheck() bool {
	if x != nil {
		return x.OcspNoCheck
	}
	return false
}

func (x *CertProfile) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

func (x *CertProfile) GetBackdate() string {
	if x != nil {
		return x.Backdate
	}
	return ""
}

func (x *CertProfile) GetAllowedExtensions() []string {
	if x != nil {
		return x.AllowedExtensions
	}
	return nil
}

func (x *CertProfile) GetAllowedNames() string {
	if x != nil {
		return x.AllowedNames
	}
	return ""
}

func (x *CertProfile) GetAllowedDns() string {
	if x != nil {
		return x.AllowedDns
	}
	return ""
}

func (x *CertProfile) GetAllowedEmail() string {
	if x != nil {
		return x.AllowedEmail
	}
	return ""
}

func (x *CertProfile) GetAllowedUri() string {
	if x != nil {
		return x.AllowedUri
	}
	return ""
}

func (x *CertProfile) GetAllowedFields() *CSRAllowedFields {
	if x != nil {
		return x.AllowedFields
	}
	return nil
}

func (x *CertProfile) GetPolicies() []*CertificatePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *CertProfile) GetPoliciesCritical() bool {
	if x != nil {
		return x.PoliciesCritical
	}
	return false
}

func (x *CertProfile) GetAllowedRoles() []string {
	if x != nil {
		return x.AllowedRoles
	}
	return nil
}

func (x *CertProfile) GetDeniedRoles() []string {
	if x != nil {
		return x.DeniedRoles
	}
	return nil
}

type IssuerSerial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ikid provides Issuer Key Identifier
	Ikid string `protobuf:"bytes,1,opt,name=ikid,proto3" json:"ikid,omitempty"`
	// SerialNumber provides certificate's serial number
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *IssuerSerial) Reset() {
	*x = IssuerSerial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkix_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerSerial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerSerial) ProtoMessage() {}

func (x *IssuerSerial) ProtoReflect() protoreflect.Message {
	mi := &file_pkix_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerSerial.ProtoReflect.Descriptor instead.
func (*IssuerSerial) Descriptor() ([]byte, []int) {
	return file_pkix_proto_rawDescGZIP(), []int{11}
}

func (x *IssuerSerial) GetIkid() string {
	if x != nil {
		return x.Ikid
	}
	return ""
}

func (x *IssuerSerial) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

var File_pkix_proto protoreflect.FileDescriptor

var file_pkix_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6b, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x90, 0x02, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12,
	0x1f, 0x0a, 0x05, 0x74, 0x72, 0x75, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x05, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x65, 0x6d, 0x22, 0xc4, 0x03, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6b, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6b,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x73, 0x5f, 0x70, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x31, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12,
	0x22, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x03, 0x43, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6b, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x65, 0x6d, 0x22, 0xab, 0x01, 0x0a, 0x08, 0x58, 0x35, 0x30, 0x39, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55,
	0x6e, 0x69, 0x74, 0x22, 0x77, 0x0a, 0x0b, 0x58, 0x35, 0x30, 0x39, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x0c,
	0x43, 0x41, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43,
	0x61, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x74, 0x68,
	0x4c, 0x65, 0x6e, 0x22, 0x76, 0x0a, 0x10, 0x43, 0x53, 0x52, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x64, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x46, 0x0a, 0x1a, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0xaf, 0x05, 0x0a, 0x0b, 0x43, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x63,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x41, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x63, 0x73, 0x70, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x63, 0x73, 0x70, 0x4e,
	0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x53, 0x52, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x0c, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6b,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6b, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x2a, 0x29, 0x0a, 0x05, 0x54, 0x72, 0x75, 0x73, 0x74, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x6e, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x02, 0x2a, 0x2d,
	0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4b, 0x43, 0x53, 0x37, 0x10, 0x02, 0x2a, 0xdc, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x53, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x45, 0x53,
	0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x52, 0x4c, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x41, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x0a, 0x42, 0x2d, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x69, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pkix_proto_rawDescOnce sync.Once
	file_pkix_proto_rawDescData = file_pkix_proto_rawDesc
)

func file_pkix_proto_rawDescGZIP() []byte {
	file_pkix_proto_rawDescOnce.Do(func() {
		file_pkix_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkix_proto_rawDescData)
	})
	return file_pkix_proto_rawDescData
}

var file_pkix_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pkix_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pkix_proto_goTypes = []interface{}{
	(Trust)(0),                         // 0: pb.Trust
	(EncodingFormat)(0),                // 1: pb.EncodingFormat
	(Reason)(0),                        // 2: pb.Reason
	(*RootCertificate)(nil),            // 3: pb.RootCertificate
	(*Certificate)(nil),                // 4: pb.Certificate
	(*RevokedCertificate)(nil),         // 5: pb.RevokedCertificate
	(*Crl)(nil),                        // 6: pb.Crl
	(*X509Name)(nil),                   // 7: pb.X509Name
	(*X509Subject)(nil),                // 8: pb.X509Subject
	(*CAConstraint)(nil),               // 9: pb.CAConstraint
	(*CSRAllowedFields)(nil),           // 10: pb.CSRAllowedFields
	(*CertificatePolicyQualifier)(nil), // 11: pb.CertificatePolicyQualifier
	(*CertificatePolicy)(nil),          // 12: pb.CertificatePolicy
	(*CertProfile)(nil),                // 13: pb.CertProfile
	(*IssuerSerial)(nil),               // 14: pb.IssuerSerial
	(*timestamp.Timestamp)(nil),        // 15: google.protobuf.Timestamp
}
var file_pkix_proto_depIdxs = []int32{
	15, // 0: pb.RootCertificate.not_before:type_name -> google.protobuf.Timestamp
	15, // 1: pb.RootCertificate.not_after:type_name -> google.protobuf.Timestamp
	0,  // 2: pb.RootCertificate.trust:type_name -> pb.Trust
	15, // 3: pb.Certificate.not_before:type_name -> google.protobuf.Timestamp
	15, // 4: pb.Certificate.not_after:type_name -> google.protobuf.Timestamp
	4,  // 5: pb.RevokedCertificate.certificate:type_name -> pb.Certificate
	15, // 6: pb.RevokedCertificate.revoked_at:type_name -> google.protobuf.Timestamp
	2,  // 7: pb.RevokedCertificate.reason:type_name -> pb.Reason
	15, // 8: pb.Crl.this_update:type_name -> google.protobuf.Timestamp
	15, // 9: pb.Crl.next_update:type_name -> google.protobuf.Timestamp
	7,  // 10: pb.X509Subject.names:type_name -> pb.X509Name
	11, // 11: pb.CertificatePolicy.qualifiers:type_name -> pb.CertificatePolicyQualifier
	9,  // 12: pb.CertProfile.ca_constraint:type_name -> pb.CAConstraint
	10, // 13: pb.CertProfile.allowed_fields:type_name -> pb.CSRAllowedFields
	12, // 14: pb.CertProfile.policies:type_name -> pb.CertificatePolicy
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pkix_proto_init() }
func file_pkix_proto_init() {
	if File_pkix_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkix_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokedCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRAllowedFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificatePolicyQualifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificatePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkix_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuerSerial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkix_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkix_proto_goTypes,
		DependencyIndexes: file_pkix_proto_depIdxs,
		EnumInfos:         file_pkix_proto_enumTypes,
		MessageInfos:      file_pkix_proto_msgTypes,
	}.Build()
	File_pkix_proto = out.File
	file_pkix_proto_rawDesc = nil
	file_pkix_proto_goTypes = nil
	file_pkix_proto_depIdxs = nil
}
