syntax = "proto3";
package pb;

option go_package = "github.com/ekspand/trusty/api/v1/pb";

//import "rpc.proto";
import "pkix.proto";
import "google/protobuf/empty.proto";
// import "google/protobuf/timestamp.proto";
// for grpc-gateway
import "google/api/annotations.proto";

service CAService {
        // ProfileInfo returns the certificate profile info
        rpc ProfileInfo(CertProfileInfoRequest) returns (CertProfileInfo) {
            option (google.api.http) = {
                post: "/v1/ca/csr/profile_info"
            };
        }

        // SignCertificate returns the certificate
        rpc SignCertificate(SignCertificateRequest) returns (CertificateBundle) {
            option (google.api.http) = {
                post: "/v1/ca/csr/create"
            };
        }

        // Issuers returns the issuing CAs
        rpc Issuers(google.protobuf.Empty) returns (IssuersInfoResponse) {
            option (google.api.http) = {
                get: "/v1/ca/issuers"
            };
        }
}

message CertProfileInfoRequest {
    string label = 1;
    string profile = 2;
}

// CertProfileInfo is the response for an Profile Info API request
message CertProfileInfo {
    string issuer = 1;
    CertProfile profile = 3;
}

// CertificateBundle provides certificate and its issuers
message CertificateBundle {
    // Certificate provides the certificate in PEM format
    string certificate = 1;
    // Intermediates provides the intermediate CA certificates bundle in PEM format
    string intermediates = 2;
    // Root provides the Root CA certifica in PEM format
    string root = 3;
}

// IssuerInfo provides Issuer information
message IssuerInfo {
    // Certificate provides the certificate in PEM format
    string certificate = 1;
    // Intermediates provides the intermediate CA certificates bundle in PEM format
    string intermediates = 2;
    // Root provides the Root CA certificate in PEM format
    string root = 3;
    // Label specifies the Issuer's label
    string label = 4;
}

// IssuersInfoResponse provides response for Issuers Info request
message IssuersInfoResponse {
    repeated IssuerInfo issuers = 1;
}

// SignCertificateRequest specifies certificate request
message SignCertificateRequest {
    // RequestFormat provides the certificate request format: CSR, CMS
    EncodingFormat request_format = 1;
    // Request provides the certificate request
    string request = 2;
    // Profile specifies the certificate profile: client, server, spiffe
    string profile = 3;
    // IssuerLabel specifies which Issuer to be appointed to sign the request
    string issuer_label = 4;
    // WithBundle specifies whether to include an "optimal" certificate bundle along with the certificate
    bool with_bundle = 5;
    // Token provides the authorization token for the request
    string token = 6;
    // San specifies Subject Alternative Names
    repeated string san = 7;
}
