syntax = "proto3";
package pb;

option go_package = "github.com/martinisecurity/trusty/api/v1/pb";

import "pkix.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// for grpc-gateway
import "google/api/annotations.proto";

service CAService {
    // ProfileInfo returns the certificate profile info
    rpc ProfileInfo(CertProfileInfoRequest) returns (CertProfileInfo) {
        option (google.api.http) = {
            post: "/v1/ca/profile_info"
        };
    }

    // Issuers returns the issuing CAs
    rpc Issuers(google.protobuf.Empty) returns (IssuersInfoResponse) {
    }

    // SignCertificate returns the certificate
    rpc SignCertificate(SignCertificateRequest) returns (CertificateResponse) {
    }

    // GetCertificate returns the certificate
    rpc GetCertificate(GetCertificateRequest) returns (CertificateResponse) {
        option (google.api.http) = {
            post: "/v1/ca/certs"
        };
    }

    // RevokeCertificate returns the revoked certificate
    rpc RevokeCertificate(RevokeCertificateRequest) returns (RevokedCertificateResponse) {
    }

    // PublishCrls returns published CRLs
    rpc PublishCrls(PublishCrlsRequest) returns (CrlsResponse) {
    }

    // ListCertificates returns stream of Certificates
    rpc ListCertificates(ListByIssuerRequest) returns (CertificatesResponse) {
    }

    // ListRevokedCertificates returns stream of Revoked Certificates
    rpc ListRevokedCertificates(ListByIssuerRequest) returns (RevokedCertificatesResponse) {
    }

    /*
    // GetOrgCertificates returns the Org certificates
    rpc GetOrgCertificates(GetOrgCertificatesRequest) returns (CertificatesResponse) {
        option (google.api.http) = {
            get: "/v1/cis/certs"
        };
    }
    */
}

message CertProfileInfoRequest {
    string label = 1;
    string profile = 2;
}

// CertProfileInfo is the response for an Profile Info API request
message CertProfileInfo {
    string issuer = 1;
    string label = 2;
    CertProfile profile = 3;
}

// CertificateBundle provides certificate and its issuers
message CertificateBundle {
    // Certificate provides the certificate in PEM format
    string certificate = 1;
    // Intermediates provides the intermediate CA certificates bundle in PEM format
    string intermediates = 2;
    // Root provides the Root CA certifica in PEM format
    string root = 3;
}

// IssuerInfo provides Issuer information
message IssuerInfo {
    // Certificate provides the certificate in PEM format
    string certificate = 1;
    // Intermediates provides the intermediate CA certificates bundle in PEM format
    string intermediates = 2;
    // Root provides the Root CA certificate in PEM format
    string root = 3;
    // Label specifies the Issuer's label
    string label = 4;
}

// IssuersInfoResponse provides response for Issuers Info request
message IssuersInfoResponse {
    repeated IssuerInfo issuers = 1;
}

// SignCertificateRequest specifies certificate sign request
message SignCertificateRequest {
    // RequestFormat provides the certificate request format: CSR, CMS
    EncodingFormat request_format = 1;
    // Request provides the certificate request
    bytes request = 2;
    // Profile specifies the certificate profile: client, server, spiffe
    string profile = 3;
    // IssuerLabel specifies which Issuer to be appointed to sign the request
    string issuer_label = 4;
    // San specifies Subject Alternative Names
    repeated string san = 5;
    // Subject specifies name
    X509Subject subject = 6;
    // Token provides the authorization token for the request
    string token = 7;
    // OrgId provides the ID of Organization that certificate belongs to
    uint64 org_id = 8;
    // NotBefore is the time when the validity period starts
    google.protobuf.Timestamp not_before = 9 [json_name="not_before"];
    // NotAfter is the time when the validity period ends
    google.protobuf.Timestamp not_after = 10 [json_name="not_after"];
}

// GetCertificateRequest specifies certificate request by ID or issuer key identifier
message GetCertificateRequest {
    // Id specifies certificate ID.
    // If it's not set, then SKID must be provided
    uint64 id = 1;
    // SKID specifies Subject Key ID to search
    string skid = 2;
}

message ListByIssuerRequest {
    // Limit specifies the limit to return, or ALL if 0
    int64 limit = 1; 
    // After specifies certificate ID to start after
    uint64 after = 2;
    // IKID specifies Issuer Key ID to search
    string ikid = 3;
}

// RevokeCertificateRequest specifies revocation request
message RevokeCertificateRequest {
    // Id specifies certificate ID.
    // If it's not set, then SKID must be provided
    uint64 id = 1;
    // SKID specifies Subject Key ID to search
    string skid = 2;
    // IssuerSerial specifies Issuer Key ID and certificate serial number to search
    IssuerSerial issuer_serial = 3;
    // Reason for revocation
    Reason reason = 4;
}

// CertificateResponse returns Certificate
message CertificateResponse {
    Certificate certificate = 1;
}

// CertificatesResponse returns Certificates list
message CertificatesResponse {
    repeated Certificate list = 1;
}

// RevokedCertificateResponse returns Revoked Certificate
message RevokedCertificateResponse {
    RevokedCertificate revoked = 1;
}

// RevokedCertificatesResponse returns Revoked Certificates list
message RevokedCertificatesResponse {
    repeated RevokedCertificate list = 1;
}

// PublishCrlsRequest allows to publish CRLs on demand
message PublishCrlsRequest {
    // IKID specifies Issuer, or empty to publish for all issuers
    string ikid = 1;
}

// CrlsResponse returns published CRLs
message CrlsResponse {
    repeated Crl clrs = 1;
}

// GetOrgsCertificatesRequest specifies a certificates request by Org ID
message GetOrgCertificatesRequest {
    // OrgId specifies the Org ID.
    uint64 org_id = 1;
}
