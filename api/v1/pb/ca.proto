syntax = "proto3";
package pb;

option go_package = "github.com/ekspand/trusty/api/v1/pb";

import "pkix.proto";
import "google/protobuf/empty.proto";
// import "google/protobuf/timestamp.proto";
// for grpc-gateway
import "google/api/annotations.proto";

service CAService {
    // ProfileInfo returns the certificate profile info
    rpc ProfileInfo(CertProfileInfoRequest) returns (CertProfileInfo) {
        option (google.api.http) = {
            post: "/v1/ca/profile_info"
        };
    }

    // Issuers returns the issuing CAs
    rpc Issuers(google.protobuf.Empty) returns (IssuersInfoResponse) {
    }

    // SignCertificate returns the certificate
    rpc SignCertificate(SignCertificateRequest) returns (CertificateResponse) {
    }

    // PublishCrls returns published CRLs
    rpc PublishCrls(PublishCrlsRequest) returns (CrlsResponse) {
    }

    // RevokeCertificate returns the revoked certificate
    rpc RevokeCertificate(RevokeCertificateRequest) returns (RevokedCertificateResponse) {
    }    
}

message CertProfileInfoRequest {
    string label = 1;
    string profile = 2;
}

// IssuersInfoResponse provides response for Issuers Info request
message IssuersInfoResponse {
    repeated IssuerInfo issuers = 1;
}

// SignCertificateRequest specifies certificate sign request
message SignCertificateRequest {
    // RequestFormat provides the certificate request format: CSR, CMS
    EncodingFormat request_format = 1;
    // Request provides the certificate request
    bytes request = 2;
    // Profile specifies the certificate profile: client, server, spiffe
    string profile = 3;
    // IssuerLabel specifies which Issuer to be appointed to sign the request
    string issuer_label = 4;
    // San specifies Subject Alternative Names
    repeated string san = 5;
    // Subject specifies name
    X509Subject subject = 6;
    // Token provides the authorization token for the request
    string token = 7;
    // OrgId provides the ID of Organization that certificate belongs to
    uint64 org_id = 8;
}

// PublishCrlsRequest allows to publish CRLs on demand
message PublishCrlsRequest {
    // IKID specifies Issuer, or empty to publish for all issuers
    string ikid = 1;
}

// RevokeCertificateRequest specifies revocation request
message RevokeCertificateRequest {
    // Id specifies certificate ID.
    // If it's not set, then SKID must be provided
    uint64 id = 1;
    // SKID specifies Subject Key ID to search
    string skid = 2;
    // Reason for revocation
    Reason reason = 3;
}
