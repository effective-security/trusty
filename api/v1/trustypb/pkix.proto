syntax = "proto3";
package trustypb;

option go_package = "github.com/ekspand/trusty/api/v1/trustypb";

import "rpc.proto";
// import "google/protobuf/timestamp.proto";
// for grpc-gateway
import "google/api/annotations.proto";

service AuthorityService {
        // ProfileInfo returns the certificate profile info
        rpc ProfileInfo(CertProfileInfoRequest) returns (CertProfileInfo) {
            option (google.api.http) = {
                post: "/v1gw/ca/csr/profile_info"
            };
        }

        // SignCertificate returns the certificate
        rpc SignCertificate(SignCertificateRequest) returns (CertificateBundle) {
            option (google.api.http) = {
                post: "/v1gw/ca/csr/create"
            };
        }

        // Issuers returns the issuing CAs
        rpc Issuers(EmptyRequest) returns (IssuersInfoResponse) {
            option (google.api.http) = {
                get: "/v1gw/ca/issuers"
            };
        }
}

// X509Name specifies X509 Name
message X509Name {
    string country = 1;
    string state = 2;
    string locality = 3;
    string organisation = 4;
    string organisational_unit = 5;
}

// X509Subject specifies X509 Subject
message X509Subject {
    string common_name = 1;
    repeated X509Name names = 2;
    string serial_number = 3;
}

message CertProfileInfoRequest {
    string label = 1;
    string profile = 2;
}

// CAConstraint specifies various CA constraints on the signed certificate.
// CAConstraint would verify against (and override) the CA
// extensions in the given CSR.
message CAConstraint {
	bool is_ca = 1;
	int32 max_path_len = 2;
	int32 max_path_len_zero =3;
}

message CSRAllowedFields {
	bool subject = 1;
	bool dns = 2;
	bool ip = 3;
	bool email = 4;
}

// CertProfile provides certificate profile
message CertProfile {
	string description = 1;

	// Usage provides a list key usages
	repeated string usages = 2;

	CAConstraint ca_constraint  = 3;
	bool ocsp_no_check  = 4;

	string expiry = 5;
	string backdate = 6;

	repeated string allowed_extensions = 7;

	// AllowedNames specifies a RegExp to check for allowed names.
	// If not provided, then all names are allowed
	string allowed_names = 8;

	// AllowedDns specifies a RegExp to check for allowed DNS.
	// If not provided, then all names are allowed
	string allowed_dns = 9;

	// AllowedEmail specifies a RegExp to check for allowed email.
	// If not provided, then all names are allowed
	string allowed_email = 10;

	// AllowedFields provides booleans for fields in the CSR.
	// If a AllowedFields is not present in a CertProfile,
	// all of these fields may be copied from the CSR into the signed certificate.
	// If a AllowedFields *is* present in a CertProfile,
	// only those fields with a `true` value in the AllowedFields may
	// be copied from the CSR to the signed certificate.
	// Note that some of these fields, like Subject, can be provided or
	// partially provided through the API.
	// Since API clients are expected to be trusted, but CSRs are not, fields
	// provided through the API are not subject to validation through this
	// mechanism.
	CSRAllowedFields allowed_fields = 11;

    // TODO
	// Policies []csr.CertificatePolicy `json:"policies"`
}

// CertProfileInfo is the response for an Profile Info API request
message CertProfileInfo {
    string issuer = 1;
    CertProfile profile = 3;
}

// CertificateBundle provides certificate and its issuers
message CertificateBundle {
    // Certificate provides the certificate in PEM format
    string certificate = 1;
    // Intermediates provides the intermediate CA certificates bundle in PEM format
    string intermediates = 2;
    // Root provides the Root CA certifica in PEM format
    string root = 3;
}

// IssuerInfo provides Issuer information
message IssuerInfo {
    // Certificate provides the certificate in PEM format
    string certificate = 1;
    // Intermediates provides the intermediate CA certificates bundle in PEM format
    string intermediates = 2;
    // Root provides the Root CA certificate in PEM format
    string root = 3;
    // Label specifies the Issuer's label
    string label = 4;
}

// IssuersInfoResponse provides response for Issuers Info request
message IssuersInfoResponse {
    repeated IssuerInfo issuers = 1;
}

enum EncodingFormat {
    PEM = 0; // default, PEM encoded
    DER = 1;
    PKCS7 = 2;
}

// SignCertificateRequest specifies certificate request
message SignCertificateRequest {
    // RequestFormat provides the certificate request format: CSR, CMS
    EncodingFormat request_format = 1;
    // Request provides the certificate request
    string request = 2;
    // Profile specifies the certificate profile: client, server, spiffe
    string profile = 3;
    // IssuerLabel specifies which Issuer to be appointed to sign the request
    string issuer_label = 4;
    // WithBundle specifies whether to include an "optimal" certificate bundle along with the certificate
    bool with_bundle = 5;
    // Token provides the authorization token for the request
    string token = 6;
}
