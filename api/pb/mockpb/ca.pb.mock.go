// Code generated by protoc-gen-go-mock. DO NOT EDIT.
// source: ca.proto

package mockpb

import (
	"context"

	"github.com/effective-security/trusty/api/pb"
	"google.golang.org/protobuf/proto"
)

// MockCAServer for testing
type MockCAServer struct {
	pb.CAServer

	Reqs []proto.Message

	// If set, all calls return this error.
	Err error

	// responses to return if err == nil
	Resps []proto.Message
	Index int
}

// SetResponse sets a single response without errors
func (m *MockCAServer) SetResponse(r proto.Message) {
	m.Err = nil
	m.Resps = []proto.Message{r}
	m.Index = 0
}

func (m *MockCAServer) next() proto.Message {
	c := len(m.Resps)
	idx := m.Index
	m.Index++
	if idx >= c {
		idx = c - 1
	}
	return m.Resps[idx]
}

// ProfileInfo returns the certificate profile info
func (m *MockCAServer) ProfileInfo(ctx context.Context, req *pb.CertProfileInfoRequest) (*pb.CertProfile, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CertProfile), nil
}

// GetIssuer returns the issuing CA
func (m *MockCAServer) GetIssuer(ctx context.Context, req *pb.IssuerInfoRequest) (*pb.IssuerInfo, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.IssuerInfo), nil
}

// ListIssuers returns the issuing CAs
func (m *MockCAServer) ListIssuers(ctx context.Context, req *pb.ListIssuersRequest) (*pb.IssuersInfoResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.IssuersInfoResponse), nil
}

// SignCertificate returns the certificate
func (m *MockCAServer) SignCertificate(ctx context.Context, req *pb.SignCertificateRequest) (*pb.CertificateResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CertificateResponse), nil
}

// GetCertificate returns the certificate
func (m *MockCAServer) GetCertificate(ctx context.Context, req *pb.GetCertificateRequest) (*pb.CertificateResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CertificateResponse), nil
}

// GetCRL returns the CRL
func (m *MockCAServer) GetCRL(ctx context.Context, req *pb.GetCrlRequest) (*pb.CrlResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CrlResponse), nil
}

// SignOCSP returns OCSP response
func (m *MockCAServer) SignOCSP(ctx context.Context, req *pb.OCSPRequest) (*pb.OCSPResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.OCSPResponse), nil
}

// RevokeCertificate returns the revoked certificate
func (m *MockCAServer) RevokeCertificate(ctx context.Context, req *pb.RevokeCertificateRequest) (*pb.RevokedCertificateResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.RevokedCertificateResponse), nil
}

// PublishCrls returns published CRLs
func (m *MockCAServer) PublishCrls(ctx context.Context, req *pb.PublishCrlsRequest) (*pb.CrlsResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CrlsResponse), nil
}

// ListOrgCertificates returns the Org certificates
func (m *MockCAServer) ListOrgCertificates(ctx context.Context, req *pb.ListOrgCertificatesRequest) (*pb.CertificatesResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CertificatesResponse), nil
}

// ListCertificates returns stream of Certificates
func (m *MockCAServer) ListCertificates(ctx context.Context, req *pb.ListByIssuerRequest) (*pb.CertificatesResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CertificatesResponse), nil
}

// ListRevokedCertificates returns stream of Revoked Certificates
func (m *MockCAServer) ListRevokedCertificates(ctx context.Context, req *pb.ListByIssuerRequest) (*pb.RevokedCertificatesResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.RevokedCertificatesResponse), nil
}

// UpdateCertificateLabel returns the updated certificate
func (m *MockCAServer) UpdateCertificateLabel(ctx context.Context, req *pb.UpdateCertificateLabelRequest) (*pb.CertificateResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CertificateResponse), nil
}

// ListDelegatedIssuers returns the delegated issuing CAs
func (m *MockCAServer) ListDelegatedIssuers(ctx context.Context, req *pb.ListIssuersRequest) (*pb.IssuersInfoResponse, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.IssuersInfoResponse), nil
}

// RegisterDelegatedIssuer creates new delegate issuer.
// NOTE: the key and CSR is generated by the server, and request field must be empty
func (m *MockCAServer) RegisterDelegatedIssuer(ctx context.Context, req *pb.SignCertificateRequest) (*pb.IssuerInfo, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.IssuerInfo), nil
}

// ArchiveDelegatedIssuer archives a delegated issuer.
func (m *MockCAServer) ArchiveDelegatedIssuer(ctx context.Context, req *pb.IssuerInfoRequest) (*pb.IssuerInfo, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.IssuerInfo), nil
}

// RegisterProfile registers the certificate profile
func (m *MockCAServer) RegisterProfile(ctx context.Context, req *pb.RegisterProfileRequest) (*pb.CertProfile, error) {
	if m.Err != nil {
		return nil, m.Err
	}
	return m.next().(*pb.CertProfile), nil
}
