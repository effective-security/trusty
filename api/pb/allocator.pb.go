// Code generated by protoc-gen-go-mock. DO NOT EDIT.

package pb

import (
	"net/http"

	"github.com/effective-security/porto/xhttp/httperror"
	"github.com/effective-security/porto/xhttp/marshal"
	"google.golang.org/protobuf/types/known/emptypb"
)

// RequestAllocator defines constructor to allocate Protobuf request
type RequestAllocator func() any

// MethodInfo provides info about RPC method
type MethodInfo struct {
	Allocator    RequestAllocator
	AllowedRoles []string
}

// UnmarshalRequest unmarshals JSON body of HTTP request to protobuf request
func UnmarshalRequest(w http.ResponseWriter, r *http.Request) (any, *MethodInfo, error) {
	info := methods[r.URL.Path]
	if info == nil {
		err := httperror.NotFound("path not found: %s", r.URL.Path)
		marshal.WriteJSON(w, r, err)
		return nil, nil, err
	}

	req := info.Allocator()
	err := marshal.DecodeBody(w, r, req)
	if err != nil {
		// DecodeBody writes error response and logs, if invalid request
		return nil, nil, err
	}
	return req, info, nil
}

// GetMethodInfo returns MethodInfo
func GetMethodInfo(method string) *MethodInfo {
	return methods[method]
}

// methods defines map for routes
var methods = map[string]*MethodInfo{

	CA_ProfileInfo_FullMethodName: {
		Allocator: func() any { return new(CertProfileInfoRequest) },
	},

	CA_GetIssuer_FullMethodName: {
		Allocator: func() any { return new(IssuerInfoRequest) },
	},

	CA_ListIssuers_FullMethodName: {
		Allocator: func() any { return new(ListIssuersRequest) },
	},

	CA_SignCertificate_FullMethodName: {
		Allocator: func() any { return new(SignCertificateRequest) },
	},

	CA_GetCertificate_FullMethodName: {
		Allocator: func() any { return new(GetCertificateRequest) },
	},

	CA_GetCRL_FullMethodName: {
		Allocator: func() any { return new(GetCrlRequest) },
	},

	CA_SignOCSP_FullMethodName: {
		Allocator: func() any { return new(OCSPRequest) },
	},

	CA_RevokeCertificate_FullMethodName: {
		Allocator: func() any { return new(RevokeCertificateRequest) },
	},

	CA_PublishCrls_FullMethodName: {
		Allocator: func() any { return new(PublishCrlsRequest) },
	},

	CA_ListOrgCertificates_FullMethodName: {
		Allocator: func() any { return new(ListOrgCertificatesRequest) },
	},

	CA_ListCertificates_FullMethodName: {
		Allocator: func() any { return new(ListByIssuerRequest) },
	},

	CA_ListRevokedCertificates_FullMethodName: {
		Allocator: func() any { return new(ListByIssuerRequest) },
	},

	CA_UpdateCertificateLabel_FullMethodName: {
		Allocator: func() any { return new(UpdateCertificateLabelRequest) },
	},

	CA_ListDelegatedIssuers_FullMethodName: {
		Allocator: func() any { return new(ListIssuersRequest) },
	},

	CA_RegisterDelegatedIssuer_FullMethodName: {
		Allocator: func() any { return new(SignCertificateRequest) },
	},

	CA_ArchiveDelegatedIssuer_FullMethodName: {
		Allocator: func() any { return new(IssuerInfoRequest) },
	},

	CA_RegisterProfile_FullMethodName: {
		Allocator: func() any { return new(RegisterProfileRequest) },
	},

	CIS_GetRoots_FullMethodName: {
		Allocator: func() any { return new(emptypb.Empty) },
	},

	CIS_GetCertificate_FullMethodName: {
		Allocator: func() any { return new(GetCertificateRequest) },
	},

	Status_Version_FullMethodName: {
		Allocator: func() any { return new(emptypb.Empty) },
	},

	Status_Server_FullMethodName: {
		Allocator: func() any { return new(emptypb.Empty) },
	},

	Status_Caller_FullMethodName: {
		Allocator: func() any { return new(emptypb.Empty) },
	},
}
