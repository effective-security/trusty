// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: ca.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IssuerStatus int32

const (
	IssuerStatus_ARCHIVED IssuerStatus = 0
	IssuerStatus_ACTIVE   IssuerStatus = 1
)

// Enum value maps for IssuerStatus.
var (
	IssuerStatus_name = map[int32]string{
		0: "ARCHIVED",
		1: "ACTIVE",
	}
	IssuerStatus_value = map[string]int32{
		"ARCHIVED": 0,
		"ACTIVE":   1,
	}
)

func (x IssuerStatus) Enum() *IssuerStatus {
	p := new(IssuerStatus)
	*p = x
	return p
}

func (x IssuerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssuerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ca_proto_enumTypes[0].Descriptor()
}

func (IssuerStatus) Type() protoreflect.EnumType {
	return &file_ca_proto_enumTypes[0]
}

func (x IssuerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssuerStatus.Descriptor instead.
func (IssuerStatus) EnumDescriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{0}
}

type CertProfileInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (x *CertProfileInfoRequest) Reset() {
	*x = CertProfileInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertProfileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertProfileInfoRequest) ProtoMessage() {}

func (x *CertProfileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertProfileInfoRequest.ProtoReflect.Descriptor instead.
func (*CertProfileInfoRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{0}
}

func (x *CertProfileInfoRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type IssuerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	// IKID specifies Issuer Key ID to search
	IKID string `protobuf:"bytes,2,opt,name=IKID,proto3" json:"IKID,omitempty"`
}

func (x *IssuerInfoRequest) Reset() {
	*x = IssuerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerInfoRequest) ProtoMessage() {}

func (x *IssuerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerInfoRequest.ProtoReflect.Descriptor instead.
func (*IssuerInfoRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{1}
}

func (x *IssuerInfoRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *IssuerInfoRequest) GetIKID() string {
	if x != nil {
		return x.IKID
	}
	return ""
}

// CertificateBundle provides certificate and its issuers
type CertificateBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Certificate provides the certificate in PEM format
	Certificate string `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	// Intermediates provides the intermediate CA certificates bundle in PEM format
	Intermediates string `protobuf:"bytes,2,opt,name=Intermediates,proto3" json:"Intermediates,omitempty"`
	// Root provides the Root CA certifica in PEM format
	Root string `protobuf:"bytes,3,opt,name=Root,proto3" json:"Root,omitempty"`
}

func (x *CertificateBundle) Reset() {
	*x = CertificateBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateBundle) ProtoMessage() {}

func (x *CertificateBundle) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateBundle.ProtoReflect.Descriptor instead.
func (*CertificateBundle) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{2}
}

func (x *CertificateBundle) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *CertificateBundle) GetIntermediates() string {
	if x != nil {
		return x.Intermediates
	}
	return ""
}

func (x *CertificateBundle) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

// IssuerInfo provides Issuer information
type IssuerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the issuer. This field is used only with delegated issuers
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Label specifies the Issuer's label
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Certificate provides the certificate in PEM format
	Certificate string `protobuf:"bytes,3,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	// Intermediates provides the intermediate CA certificates bundle in PEM format
	Intermediates string `protobuf:"bytes,4,opt,name=Intermediates,proto3" json:"Intermediates,omitempty"`
	// Root provides the Root CA certificate in PEM format
	Root string `protobuf:"bytes,5,opt,name=Root,proto3" json:"Root,omitempty"`
	// Profiles specifies the list of profiles the issuer supports
	Profiles []string `protobuf:"bytes,6,rep,name=Profiles,proto3" json:"Profiles,omitempty"`
	// Type of the issuer
	Type string `protobuf:"bytes,7,opt,name=Type,proto3" json:"Type,omitempty"`
	// Status of the issuer
	Status IssuerStatus `protobuf:"varint,8,opt,name=Status,proto3,enum=pb.IssuerStatus" json:"Status,omitempty"`
}

func (x *IssuerInfo) Reset() {
	*x = IssuerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerInfo) ProtoMessage() {}

func (x *IssuerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerInfo.ProtoReflect.Descriptor instead.
func (*IssuerInfo) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{3}
}

func (x *IssuerInfo) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *IssuerInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *IssuerInfo) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *IssuerInfo) GetIntermediates() string {
	if x != nil {
		return x.Intermediates
	}
	return ""
}

func (x *IssuerInfo) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *IssuerInfo) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *IssuerInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IssuerInfo) GetStatus() IssuerStatus {
	if x != nil {
		return x.Status
	}
	return IssuerStatus_ARCHIVED
}

// IssuersInfoResponse provides response for Issuers Info request
type IssuersInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuers []*IssuerInfo `protobuf:"bytes,1,rep,name=Issuers,proto3" json:"Issuers,omitempty"`
}

func (x *IssuersInfoResponse) Reset() {
	*x = IssuersInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuersInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuersInfoResponse) ProtoMessage() {}

func (x *IssuersInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuersInfoResponse.ProtoReflect.Descriptor instead.
func (*IssuersInfoResponse) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{4}
}

func (x *IssuersInfoResponse) GetIssuers() []*IssuerInfo {
	if x != nil {
		return x.Issuers
	}
	return nil
}

// SignCertificateRequest specifies certificate sign request
type SignCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestFormat provides the certificate request format: CSR, CMS
	RequestFormat EncodingFormat `protobuf:"varint,1,opt,name=RequestFormat,proto3,enum=pb.EncodingFormat" json:"RequestFormat,omitempty"`
	// Request provides the certificate request
	Request []byte `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	// Profile specifies the certificate profile: client, server, spiffe
	Profile string `protobuf:"bytes,3,opt,name=Profile,proto3" json:"Profile,omitempty"`
	// IssuerLabel specifies which Issuer to be appointed to sign the request
	IssuerLabel string `protobuf:"bytes,4,opt,name=IssuerLabel,proto3" json:"IssuerLabel,omitempty"`
	// San specifies Subject Alternative Names
	SAN []string `protobuf:"bytes,5,rep,name=SAN,proto3" json:"SAN,omitempty"`
	// Subject specifies name
	Subject *X509Subject `protobuf:"bytes,6,opt,name=Subject,proto3" json:"Subject,omitempty"`
	// Token provides the authorization token for the request
	Token string `protobuf:"bytes,7,opt,name=Token,proto3" json:"Token,omitempty"`
	// OrgID provides the ID of Organization that certificate belongs to
	OrgID uint64 `protobuf:"varint,8,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	// NotBefore is the time when the validity period starts
	NotBefore string `protobuf:"bytes,9,opt,name=NotBefore,proto3" json:"NotBefore,omitempty"`
	// NotAfter is the time when the validity period ends
	NotAfter string `protobuf:"bytes,10,opt,name=NotAfter,proto3" json:"NotAfter,omitempty"`
	// Extensions specifies additional extensions to include in certificate
	Extensions []*X509Extension `protobuf:"bytes,11,rep,name=Extensions,proto3" json:"Extensions,omitempty"`
	// Label is provided by a client
	Label string `protobuf:"bytes,12,opt,name=Label,proto3" json:"Label,omitempty"`
	// Metadata is provided by a client
	Metadata map[string]string `protobuf:"bytes,13,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SignCertificateRequest) Reset() {
	*x = SignCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignCertificateRequest) ProtoMessage() {}

func (x *SignCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignCertificateRequest.ProtoReflect.Descriptor instead.
func (*SignCertificateRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{5}
}

func (x *SignCertificateRequest) GetRequestFormat() EncodingFormat {
	if x != nil {
		return x.RequestFormat
	}
	return EncodingFormat_PEM
}

func (x *SignCertificateRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SignCertificateRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *SignCertificateRequest) GetIssuerLabel() string {
	if x != nil {
		return x.IssuerLabel
	}
	return ""
}

func (x *SignCertificateRequest) GetSAN() []string {
	if x != nil {
		return x.SAN
	}
	return nil
}

func (x *SignCertificateRequest) GetSubject() *X509Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *SignCertificateRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignCertificateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *SignCertificateRequest) GetNotBefore() string {
	if x != nil {
		return x.NotBefore
	}
	return ""
}

func (x *SignCertificateRequest) GetNotAfter() string {
	if x != nil {
		return x.NotAfter
	}
	return ""
}

func (x *SignCertificateRequest) GetExtensions() []*X509Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *SignCertificateRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SignCertificateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// UpdateCertificateLabelRequest specifies certificate label update request
type UpdateCertificateLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id specifies certificate ID.
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Label is provided by a client
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (x *UpdateCertificateLabelRequest) Reset() {
	*x = UpdateCertificateLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCertificateLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCertificateLabelRequest) ProtoMessage() {}

func (x *UpdateCertificateLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCertificateLabelRequest.ProtoReflect.Descriptor instead.
func (*UpdateCertificateLabelRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCertificateLabelRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateCertificateLabelRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// GetCertificateRequest specifies certificate request by ID or issuer key identifier
type GetCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID specifies certificate ID.
	// If it's not set, then SKID must be provided
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// SKID specifies Subject Key ID to search
	SKID string `protobuf:"bytes,2,opt,name=SKID,proto3" json:"SKID,omitempty"`
	// IssuerSerial specifies Issuer Key ID and certificate serial number to search
	IssuerSerial *IssuerSerial `protobuf:"bytes,3,opt,name=IssuerSerial,proto3" json:"IssuerSerial,omitempty"`
}

func (x *GetCertificateRequest) Reset() {
	*x = GetCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateRequest) ProtoMessage() {}

func (x *GetCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{7}
}

func (x *GetCertificateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GetCertificateRequest) GetSKID() string {
	if x != nil {
		return x.SKID
	}
	return ""
}

func (x *GetCertificateRequest) GetIssuerSerial() *IssuerSerial {
	if x != nil {
		return x.IssuerSerial
	}
	return nil
}

// GetCrlRequest specifies CRL request by IKID
type GetCrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IKID specifies Issuer
	IKID string `protobuf:"bytes,1,opt,name=IKID,proto3" json:"IKID,omitempty"`
}

func (x *GetCrlRequest) Reset() {
	*x = GetCrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrlRequest) ProtoMessage() {}

func (x *GetCrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrlRequest.ProtoReflect.Descriptor instead.
func (*GetCrlRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{8}
}

func (x *GetCrlRequest) GetIKID() string {
	if x != nil {
		return x.IKID
	}
	return ""
}

type ListByIssuerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit specifies the limit to return
	Limit int64 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// After specifies certificate ID to start after
	After uint64 `protobuf:"varint,2,opt,name=After,proto3" json:"After,omitempty"`
	// IKID specifies Issuer Key ID to search
	IKID string `protobuf:"bytes,3,opt,name=IKID,proto3" json:"IKID,omitempty"`
}

func (x *ListByIssuerRequest) Reset() {
	*x = ListByIssuerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListByIssuerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListByIssuerRequest) ProtoMessage() {}

func (x *ListByIssuerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListByIssuerRequest.ProtoReflect.Descriptor instead.
func (*ListByIssuerRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{9}
}

func (x *ListByIssuerRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListByIssuerRequest) GetAfter() uint64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *ListByIssuerRequest) GetIKID() string {
	if x != nil {
		return x.IKID
	}
	return ""
}

// RevokeCertificateRequest specifies revocation request
type RevokeCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id specifies certificate ID.
	// If it's not set, then SKID must be provided
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// SKID specifies Subject Key ID to search
	SKID string `protobuf:"bytes,2,opt,name=SKID,proto3" json:"SKID,omitempty"`
	// IssuerSerial specifies Issuer Key ID and certificate serial number to search
	IssuerSerial *IssuerSerial `protobuf:"bytes,3,opt,name=IssuerSerial,proto3" json:"IssuerSerial,omitempty"`
	// Reason for revocation
	Reason Reason `protobuf:"varint,4,opt,name=Reason,proto3,enum=pb.Reason" json:"Reason,omitempty"`
}

func (x *RevokeCertificateRequest) Reset() {
	*x = RevokeCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCertificateRequest) ProtoMessage() {}

func (x *RevokeCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCertificateRequest.ProtoReflect.Descriptor instead.
func (*RevokeCertificateRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{10}
}

func (x *RevokeCertificateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RevokeCertificateRequest) GetSKID() string {
	if x != nil {
		return x.SKID
	}
	return ""
}

func (x *RevokeCertificateRequest) GetIssuerSerial() *IssuerSerial {
	if x != nil {
		return x.IssuerSerial
	}
	return nil
}

func (x *RevokeCertificateRequest) GetReason() Reason {
	if x != nil {
		return x.Reason
	}
	return Reason_UNSPECIFIED
}

// CertificateResponse returns Certificate
type CertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *Certificate `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
}

func (x *CertificateResponse) Reset() {
	*x = CertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateResponse) ProtoMessage() {}

func (x *CertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateResponse.ProtoReflect.Descriptor instead.
func (*CertificateResponse) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{11}
}

func (x *CertificateResponse) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// CertificatesResponse returns Certificates list
type CertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*Certificate `protobuf:"bytes,1,rep,name=Certificates,proto3" json:"Certificates,omitempty"`
}

func (x *CertificatesResponse) Reset() {
	*x = CertificatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificatesResponse) ProtoMessage() {}

func (x *CertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificatesResponse.ProtoReflect.Descriptor instead.
func (*CertificatesResponse) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{12}
}

func (x *CertificatesResponse) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

// RevokedCertificateResponse returns Revoked Certificate
type RevokedCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revoked *RevokedCertificate `protobuf:"bytes,1,opt,name=Revoked,proto3" json:"Revoked,omitempty"`
}

func (x *RevokedCertificateResponse) Reset() {
	*x = RevokedCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokedCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokedCertificateResponse) ProtoMessage() {}

func (x *RevokedCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokedCertificateResponse.ProtoReflect.Descriptor instead.
func (*RevokedCertificateResponse) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{13}
}

func (x *RevokedCertificateResponse) GetRevoked() *RevokedCertificate {
	if x != nil {
		return x.Revoked
	}
	return nil
}

// RevokedCertificatesResponse returns Revoked Certificates list
type RevokedCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevokedCertificates []*RevokedCertificate `protobuf:"bytes,1,rep,name=RevokedCertificates,proto3" json:"RevokedCertificates,omitempty"`
}

func (x *RevokedCertificatesResponse) Reset() {
	*x = RevokedCertificatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokedCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokedCertificatesResponse) ProtoMessage() {}

func (x *RevokedCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokedCertificatesResponse.ProtoReflect.Descriptor instead.
func (*RevokedCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{14}
}

func (x *RevokedCertificatesResponse) GetRevokedCertificates() []*RevokedCertificate {
	if x != nil {
		return x.RevokedCertificates
	}
	return nil
}

// PublishCrlsRequest allows to publish CRLs on demand
type PublishCrlsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IKID specifies Issuer, or empty to publish for all issuers
	IKID string `protobuf:"bytes,1,opt,name=IKID,proto3" json:"IKID,omitempty"`
}

func (x *PublishCrlsRequest) Reset() {
	*x = PublishCrlsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishCrlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishCrlsRequest) ProtoMessage() {}

func (x *PublishCrlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishCrlsRequest.ProtoReflect.Descriptor instead.
func (*PublishCrlsRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{15}
}

func (x *PublishCrlsRequest) GetIKID() string {
	if x != nil {
		return x.IKID
	}
	return ""
}

// CrlsResponse returns published CRLs
type CrlsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crls []*Crl `protobuf:"bytes,1,rep,name=Crls,proto3" json:"Crls,omitempty"`
}

func (x *CrlsResponse) Reset() {
	*x = CrlsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrlsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrlsResponse) ProtoMessage() {}

func (x *CrlsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrlsResponse.ProtoReflect.Descriptor instead.
func (*CrlsResponse) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{16}
}

func (x *CrlsResponse) GetCrls() []*Crl {
	if x != nil {
		return x.Crls
	}
	return nil
}

// CrlResponse returns CRL
type CrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crl *Crl `protobuf:"bytes,1,opt,name=Crl,proto3" json:"Crl,omitempty"`
}

func (x *CrlResponse) Reset() {
	*x = CrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrlResponse) ProtoMessage() {}

func (x *CrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrlResponse.ProtoReflect.Descriptor instead.
func (*CrlResponse) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{17}
}

func (x *CrlResponse) GetCrl() *Crl {
	if x != nil {
		return x.Crl
	}
	return nil
}

type OCSPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Der provides DER encoded request
	Der []byte `protobuf:"bytes,1,opt,name=Der,proto3" json:"Der,omitempty"`
}

func (x *OCSPRequest) Reset() {
	*x = OCSPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCSPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCSPRequest) ProtoMessage() {}

func (x *OCSPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCSPRequest.ProtoReflect.Descriptor instead.
func (*OCSPRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{18}
}

func (x *OCSPRequest) GetDer() []byte {
	if x != nil {
		return x.Der
	}
	return nil
}

// OCSPResponse returns OCSP
type OCSPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Der provides DER encoded response
	Der []byte `protobuf:"bytes,1,opt,name=Der,proto3" json:"Der,omitempty"`
}

func (x *OCSPResponse) Reset() {
	*x = OCSPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCSPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCSPResponse) ProtoMessage() {}

func (x *OCSPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCSPResponse.ProtoReflect.Descriptor instead.
func (*OCSPResponse) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{19}
}

func (x *OCSPResponse) GetDer() []byte {
	if x != nil {
		return x.Der
	}
	return nil
}

// ListOrgsCertificatesRequest specifies a certificates request by Org ID
type ListOrgCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit specifies the limit to return
	Limit int64 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// After specifies certificate ID to start after
	After uint64 `protobuf:"varint,2,opt,name=After,proto3" json:"After,omitempty"`
	// OrgID specifies the Org ID.
	OrgID uint64 `protobuf:"varint,3,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
}

func (x *ListOrgCertificatesRequest) Reset() {
	*x = ListOrgCertificatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgCertificatesRequest) ProtoMessage() {}

func (x *ListOrgCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgCertificatesRequest.ProtoReflect.Descriptor instead.
func (*ListOrgCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{20}
}

func (x *ListOrgCertificatesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListOrgCertificatesRequest) GetAfter() uint64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *ListOrgCertificatesRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

// RegisterProfileRequest specifies a request to register a persisted profile
type RegisterProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label provides Profile label
	Label string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	// Config is yaml encoded Profile configuration
	Config []byte `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *RegisterProfileRequest) Reset() {
	*x = RegisterProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProfileRequest) ProtoMessage() {}

func (x *RegisterProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProfileRequest.ProtoReflect.Descriptor instead.
func (*RegisterProfileRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{21}
}

func (x *RegisterProfileRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RegisterProfileRequest) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

type ListIssuersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit specifies the limit to return
	Limit int64 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// After specifies certificate ID to start after
	After uint64 `protobuf:"varint,2,opt,name=After,proto3" json:"After,omitempty"`
	// Bundle specifies to return entire chain
	Bundle bool `protobuf:"varint,3,opt,name=Bundle,proto3" json:"Bundle,omitempty"`
}

func (x *ListIssuersRequest) Reset() {
	*x = ListIssuersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ca_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIssuersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIssuersRequest) ProtoMessage() {}

func (x *ListIssuersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ca_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIssuersRequest.ProtoReflect.Descriptor instead.
func (*ListIssuersRequest) Descriptor() ([]byte, []int) {
	return file_ca_proto_rawDescGZIP(), []int{22}
}

func (x *ListIssuersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListIssuersRequest) GetAfter() uint64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *ListIssuersRequest) GetBundle() bool {
	if x != nil {
		return x.Bundle
	}
	return false
}

var File_ca_proto protoreflect.FileDescriptor

var file_ca_proto_rawDesc = []byte{
	0x0a, 0x08, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0a,
	0x70, 0x6b, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x43, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3d, 0x0a, 0x11, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4b, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x4b, 0x49, 0x44, 0x22, 0x6f, 0x0a, 0x11, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x0a, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3f, 0x0a, 0x13, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x22, 0x97, 0x04, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x41, 0x4e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x53, 0x41, 0x4e, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e,
	0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x35,
	0x30, 0x39, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x44, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x45, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x71, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x53, 0x4b, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0c, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x23, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x4b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x4b, 0x49, 0x44, 0x22,
	0x55, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x49, 0x4b, 0x49, 0x44, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x53, 0x4b, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x48, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x14, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x1a, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x07, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x13, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x28, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x72, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x4b, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x0c, 0x43,
	0x72, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x43,
	0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x6c, 0x52, 0x04, 0x43, 0x72, 0x6c, 0x73, 0x22, 0x28, 0x0a, 0x0b, 0x43, 0x72, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x43, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6c, 0x52, 0x03, 0x43,
	0x72, 0x6c, 0x22, 0x1f, 0x0a, 0x0b, 0x4f, 0x43, 0x53, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x44, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x0c, 0x4f, 0x43, 0x53, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x44, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x58, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2a, 0x28, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x32, 0xa1, 0x09, 0x0a, 0x02, 0x43, 0x41, 0x12, 0x3c, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x43, 0x52, 0x4c, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2f, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x43, 0x53, 0x50, 0x12, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x43, 0x53, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x43, 0x53, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x43, 0x72, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x43, 0x72, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x16, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ca_proto_rawDescOnce sync.Once
	file_ca_proto_rawDescData = file_ca_proto_rawDesc
)

func file_ca_proto_rawDescGZIP() []byte {
	file_ca_proto_rawDescOnce.Do(func() {
		file_ca_proto_rawDescData = protoimpl.X.CompressGZIP(file_ca_proto_rawDescData)
	})
	return file_ca_proto_rawDescData
}

var file_ca_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ca_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_ca_proto_goTypes = []any{
	(IssuerStatus)(0),                     // 0: pb.IssuerStatus
	(*CertProfileInfoRequest)(nil),        // 1: pb.CertProfileInfoRequest
	(*IssuerInfoRequest)(nil),             // 2: pb.IssuerInfoRequest
	(*CertificateBundle)(nil),             // 3: pb.CertificateBundle
	(*IssuerInfo)(nil),                    // 4: pb.IssuerInfo
	(*IssuersInfoResponse)(nil),           // 5: pb.IssuersInfoResponse
	(*SignCertificateRequest)(nil),        // 6: pb.SignCertificateRequest
	(*UpdateCertificateLabelRequest)(nil), // 7: pb.UpdateCertificateLabelRequest
	(*GetCertificateRequest)(nil),         // 8: pb.GetCertificateRequest
	(*GetCrlRequest)(nil),                 // 9: pb.GetCrlRequest
	(*ListByIssuerRequest)(nil),           // 10: pb.ListByIssuerRequest
	(*RevokeCertificateRequest)(nil),      // 11: pb.RevokeCertificateRequest
	(*CertificateResponse)(nil),           // 12: pb.CertificateResponse
	(*CertificatesResponse)(nil),          // 13: pb.CertificatesResponse
	(*RevokedCertificateResponse)(nil),    // 14: pb.RevokedCertificateResponse
	(*RevokedCertificatesResponse)(nil),   // 15: pb.RevokedCertificatesResponse
	(*PublishCrlsRequest)(nil),            // 16: pb.PublishCrlsRequest
	(*CrlsResponse)(nil),                  // 17: pb.CrlsResponse
	(*CrlResponse)(nil),                   // 18: pb.CrlResponse
	(*OCSPRequest)(nil),                   // 19: pb.OCSPRequest
	(*OCSPResponse)(nil),                  // 20: pb.OCSPResponse
	(*ListOrgCertificatesRequest)(nil),    // 21: pb.ListOrgCertificatesRequest
	(*RegisterProfileRequest)(nil),        // 22: pb.RegisterProfileRequest
	(*ListIssuersRequest)(nil),            // 23: pb.ListIssuersRequest
	nil,                                   // 24: pb.SignCertificateRequest.MetadataEntry
	(EncodingFormat)(0),                   // 25: pb.EncodingFormat
	(*X509Subject)(nil),                   // 26: pb.X509Subject
	(*X509Extension)(nil),                 // 27: pb.X509Extension
	(*IssuerSerial)(nil),                  // 28: pb.IssuerSerial
	(Reason)(0),                           // 29: pb.Reason
	(*Certificate)(nil),                   // 30: pb.Certificate
	(*RevokedCertificate)(nil),            // 31: pb.RevokedCertificate
	(*Crl)(nil),                           // 32: pb.Crl
	(*CertProfile)(nil),                   // 33: pb.CertProfile
}
var file_ca_proto_depIdxs = []int32{
	0,  // 0: pb.IssuerInfo.Status:type_name -> pb.IssuerStatus
	4,  // 1: pb.IssuersInfoResponse.Issuers:type_name -> pb.IssuerInfo
	25, // 2: pb.SignCertificateRequest.RequestFormat:type_name -> pb.EncodingFormat
	26, // 3: pb.SignCertificateRequest.Subject:type_name -> pb.X509Subject
	27, // 4: pb.SignCertificateRequest.Extensions:type_name -> pb.X509Extension
	24, // 5: pb.SignCertificateRequest.Metadata:type_name -> pb.SignCertificateRequest.MetadataEntry
	28, // 6: pb.GetCertificateRequest.IssuerSerial:type_name -> pb.IssuerSerial
	28, // 7: pb.RevokeCertificateRequest.IssuerSerial:type_name -> pb.IssuerSerial
	29, // 8: pb.RevokeCertificateRequest.Reason:type_name -> pb.Reason
	30, // 9: pb.CertificateResponse.Certificate:type_name -> pb.Certificate
	30, // 10: pb.CertificatesResponse.Certificates:type_name -> pb.Certificate
	31, // 11: pb.RevokedCertificateResponse.Revoked:type_name -> pb.RevokedCertificate
	31, // 12: pb.RevokedCertificatesResponse.RevokedCertificates:type_name -> pb.RevokedCertificate
	32, // 13: pb.CrlsResponse.Crls:type_name -> pb.Crl
	32, // 14: pb.CrlResponse.Crl:type_name -> pb.Crl
	1,  // 15: pb.CA.ProfileInfo:input_type -> pb.CertProfileInfoRequest
	2,  // 16: pb.CA.GetIssuer:input_type -> pb.IssuerInfoRequest
	23, // 17: pb.CA.ListIssuers:input_type -> pb.ListIssuersRequest
	6,  // 18: pb.CA.SignCertificate:input_type -> pb.SignCertificateRequest
	8,  // 19: pb.CA.GetCertificate:input_type -> pb.GetCertificateRequest
	9,  // 20: pb.CA.GetCRL:input_type -> pb.GetCrlRequest
	19, // 21: pb.CA.SignOCSP:input_type -> pb.OCSPRequest
	11, // 22: pb.CA.RevokeCertificate:input_type -> pb.RevokeCertificateRequest
	16, // 23: pb.CA.PublishCrls:input_type -> pb.PublishCrlsRequest
	21, // 24: pb.CA.ListOrgCertificates:input_type -> pb.ListOrgCertificatesRequest
	10, // 25: pb.CA.ListCertificates:input_type -> pb.ListByIssuerRequest
	10, // 26: pb.CA.ListRevokedCertificates:input_type -> pb.ListByIssuerRequest
	7,  // 27: pb.CA.UpdateCertificateLabel:input_type -> pb.UpdateCertificateLabelRequest
	23, // 28: pb.CA.ListDelegatedIssuers:input_type -> pb.ListIssuersRequest
	6,  // 29: pb.CA.RegisterDelegatedIssuer:input_type -> pb.SignCertificateRequest
	2,  // 30: pb.CA.ArchiveDelegatedIssuer:input_type -> pb.IssuerInfoRequest
	22, // 31: pb.CA.RegisterProfile:input_type -> pb.RegisterProfileRequest
	33, // 32: pb.CA.ProfileInfo:output_type -> pb.CertProfile
	4,  // 33: pb.CA.GetIssuer:output_type -> pb.IssuerInfo
	5,  // 34: pb.CA.ListIssuers:output_type -> pb.IssuersInfoResponse
	12, // 35: pb.CA.SignCertificate:output_type -> pb.CertificateResponse
	12, // 36: pb.CA.GetCertificate:output_type -> pb.CertificateResponse
	18, // 37: pb.CA.GetCRL:output_type -> pb.CrlResponse
	20, // 38: pb.CA.SignOCSP:output_type -> pb.OCSPResponse
	14, // 39: pb.CA.RevokeCertificate:output_type -> pb.RevokedCertificateResponse
	17, // 40: pb.CA.PublishCrls:output_type -> pb.CrlsResponse
	13, // 41: pb.CA.ListOrgCertificates:output_type -> pb.CertificatesResponse
	13, // 42: pb.CA.ListCertificates:output_type -> pb.CertificatesResponse
	15, // 43: pb.CA.ListRevokedCertificates:output_type -> pb.RevokedCertificatesResponse
	12, // 44: pb.CA.UpdateCertificateLabel:output_type -> pb.CertificateResponse
	5,  // 45: pb.CA.ListDelegatedIssuers:output_type -> pb.IssuersInfoResponse
	4,  // 46: pb.CA.RegisterDelegatedIssuer:output_type -> pb.IssuerInfo
	4,  // 47: pb.CA.ArchiveDelegatedIssuer:output_type -> pb.IssuerInfo
	33, // 48: pb.CA.RegisterProfile:output_type -> pb.CertProfile
	32, // [32:49] is the sub-list for method output_type
	15, // [15:32] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_ca_proto_init() }
func file_ca_proto_init() {
	if File_ca_proto != nil {
		return
	}
	file_pkix_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ca_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CertProfileInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*IssuerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CertificateBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*IssuerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*IssuersInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SignCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCertificateLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetCrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListByIssuerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RevokeCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CertificatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RevokedCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RevokedCertificatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PublishCrlsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CrlsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*OCSPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*OCSPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ListOrgCertificatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ca_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ListIssuersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ca_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ca_proto_goTypes,
		DependencyIndexes: file_ca_proto_depIdxs,
		EnumInfos:         file_ca_proto_enumTypes,
		MessageInfos:      file_ca_proto_msgTypes,
	}.Build()
	File_ca_proto = out.File
	file_ca_proto_rawDesc = nil
	file_ca_proto_goTypes = nil
	file_ca_proto_depIdxs = nil
}
