// Code generated by protoc-gen-go-proxy. DO NOT EDIT.
// source: status.proto

package proxypb

import (
	"context"

	"github.com/effective-security/porto/pkg/retriable"
	"github.com/effective-security/porto/xhttp/correlation"
	"github.com/effective-security/porto/xhttp/httperror"
	"github.com/effective-security/trusty/api/pb"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

type proxyStatusServer struct {
	srv pb.StatusServer
}

type proxyStatusClient struct {
	remote   pb.StatusClient
	callOpts []grpc.CallOption
}

type postproxyStatusClient struct {
	client retriable.PostRequester
}

// StatusServerToClient returns pb.StatusClient
func StatusServerToClient(srv pb.StatusServer) pb.StatusClient {
	return &proxyStatusServer{srv}
}

// NewStatusClient returns instance of the StatusClient
func NewStatusClient(conn *grpc.ClientConn, callOpts []grpc.CallOption) pb.StatusServer {
	return &proxyStatusClient{
		remote:   pb.NewStatusClient(conn),
		callOpts: callOpts,
	}
}

// NewStatusClientFromProxy returns instance of StatusClient
func NewStatusClientFromProxy(proxy pb.StatusClient) pb.StatusServer {
	return &proxyStatusClient{
		remote: proxy,
	}
}

// NewStatusClientFromProxy returns instance of StatusClient
func NewHTTPStatusClient(client retriable.PostRequester) pb.StatusServer {
	return &postproxyStatusClient{
		client: client,
	}
}

// Version returns the server version.
func (s *proxyStatusServer) Version(ctx context.Context, req *emptypb.Empty, opts ...grpc.CallOption) (*pb.ServerVersion, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.Version(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// Version returns the server version.
func (s *proxyStatusClient) Version(ctx context.Context, req *emptypb.Empty) (*pb.ServerVersion, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.Version(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// Version returns the server version.
func (s *postproxyStatusClient) Version(ctx context.Context, req *emptypb.Empty) (*pb.ServerVersion, error) {
	var res pb.ServerVersion
	path := "/pb.Status/Version"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// Server returns the server status.
func (s *proxyStatusServer) Server(ctx context.Context, req *emptypb.Empty, opts ...grpc.CallOption) (*pb.ServerStatusResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.Server(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// Server returns the server status.
func (s *proxyStatusClient) Server(ctx context.Context, req *emptypb.Empty) (*pb.ServerStatusResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.Server(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// Server returns the server status.
func (s *postproxyStatusClient) Server(ctx context.Context, req *emptypb.Empty) (*pb.ServerStatusResponse, error) {
	var res pb.ServerStatusResponse
	path := "/pb.Status/Server"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// Caller returns the caller status.
func (s *proxyStatusServer) Caller(ctx context.Context, req *emptypb.Empty, opts ...grpc.CallOption) (*pb.CallerStatusResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.srv.Caller(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// Caller returns the caller status.
func (s *proxyStatusClient) Caller(ctx context.Context, req *emptypb.Empty) (*pb.CallerStatusResponse, error) {
	// add corellation ID to outgoing RPC calls
	ctx = correlation.WithMetaFromContext(ctx)
	res, err := s.remote.Caller(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

// Caller returns the caller status.
func (s *postproxyStatusClient) Caller(ctx context.Context, req *emptypb.Empty) (*pb.CallerStatusResponse, error) {
	var res pb.CallerStatusResponse
	path := "/pb.Status/Caller"
	_, _, err := s.client.Post(ctx, path, req, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}
