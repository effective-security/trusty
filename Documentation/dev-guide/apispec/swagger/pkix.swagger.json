{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/trustypb/pkix.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AuthorityService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/ca/csr/create": {
      "post": {
        "summary": "CreateCertificate returns the certificate",
        "operationId": "AuthorityService_CreateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/trustypbCertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AuthorityService"
        ]
      }
    },
    "/v1/ca/csr/profile_info": {
      "post": {
        "summary": "ProfileInfo returns the certificate profile info",
        "operationId": "AuthorityService_ProfileInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/trustypbCertProfileInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AuthorityService"
        ]
      }
    },
    "/v1/ca/issuers": {
      "get": {
        "summary": "Issuers returns the issuing CAs",
        "operationId": "AuthorityService_Issuers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/trustypbIssuersInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AuthorityService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "trustypbCAConstraint": {
      "type": "object",
      "properties": {
        "isCa": {
          "type": "boolean"
        },
        "maxPathLen": {
          "type": "integer",
          "format": "int32"
        },
        "maxPathLenZero": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "CAConstraint specifies various CA constraints on the signed certificate.\nCAConstraint would verify against (and override) the CA\nextensions in the given CSR."
    },
    "trustypbCSRAllowedFields": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "boolean"
        },
        "dns": {
          "type": "boolean"
        },
        "ip": {
          "type": "boolean"
        },
        "email": {
          "type": "boolean"
        }
      }
    },
    "trustypbCertProfile": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "usages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Usage provides a list key usages"
        },
        "caConstraint": {
          "$ref": "#/definitions/trustypbCAConstraint"
        },
        "ocspNoCheck": {
          "type": "boolean"
        },
        "expiry": {
          "type": "string"
        },
        "backdate": {
          "type": "string"
        },
        "allowedExtensions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedNames": {
          "type": "string",
          "title": "AllowedNames specifies a RegExp to check for allowed names.\nIf not provided, then all names are allowed"
        },
        "allowedDns": {
          "type": "string",
          "title": "AllowedDns specifies a RegExp to check for allowed DNS.\nIf not provided, then all names are allowed"
        },
        "allowedEmail": {
          "type": "string",
          "title": "AllowedEmail specifies a RegExp to check for allowed email.\nIf not provided, then all names are allowed"
        },
        "allowedFields": {
          "$ref": "#/definitions/trustypbCSRAllowedFields",
          "description": "AllowedFields provides booleans for fields in the CSR.\nIf a AllowedFields is not present in a CertProfile,\nall of these fields may be copied from the CSR into the signed certificate.\nIf a AllowedFields *is* present in a CertProfile,\nonly those fields with a `true` value in the AllowedFields may\nbe copied from the CSR to the signed certificate.\nNote that some of these fields, like Subject, can be provided or\npartially provided through the API.\nSince API clients are expected to be trusted, but CSRs are not, fields\nprovided through the API are not subject to validation through this\nmechanism."
        }
      },
      "title": "CertProfile provides certificate profile"
    },
    "trustypbCertProfileInfo": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/trustypbCertProfile"
        }
      },
      "title": "CertProfileInfo is the response for an Profile Info API request"
    },
    "trustypbCertificateBundle": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "title": "Certificate provides the certificate in PEM format"
        },
        "intermediates": {
          "type": "string",
          "title": "Intermediates provides the intermediate CA certificates bundle in PEM format"
        },
        "root": {
          "type": "string",
          "title": "Root provides the Root CA certifica in PEM format"
        }
      },
      "title": "CertificateBundle provides certificate and its issuers"
    },
    "trustypbEncodingFormat": {
      "type": "string",
      "enum": [
        "PEM",
        "DER",
        "PKCS7"
      ],
      "default": "PEM"
    },
    "trustypbIssuerInfo": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "title": "Certificate provides the certificate in PEM format"
        },
        "intermediates": {
          "type": "string",
          "title": "Intermediates provides the intermediate CA certificates bundle in PEM format"
        },
        "root": {
          "type": "string",
          "title": "Root provides the Root CA certificate in PEM format"
        },
        "label": {
          "type": "string",
          "title": "Label specifies the Issuer's label"
        }
      },
      "title": "IssuerInfo provides Issuer information"
    },
    "trustypbIssuersInfoResponse": {
      "type": "object",
      "properties": {
        "issuers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/trustypbIssuerInfo"
          }
        }
      },
      "title": "IssuersInfoResponse provides response for Issuers Info request"
    }
  }
}
