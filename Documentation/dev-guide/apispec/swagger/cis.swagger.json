{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/pb/cis.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CIService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/cis/certs": {
      "get": {
        "summary": "GetOrgCertificates returns the Org certificates",
        "operationId": "CIService_GetOrgCertificates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCertificatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "description": "OrgId specifies the Org ID.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "CIService"
        ]
      }
    },
    "/v1/cis/certs/{id}": {
      "get": {
        "summary": "GetCertificate returns the certificate",
        "operationId": "CIService_GetCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id specifies certificate ID.\nIf it's not set, then SKID must be provided",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "skid",
            "description": "SKID specifies Subject Key ID to search.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CIService"
        ]
      }
    },
    "/v1/cis/roots": {
      "get": {
        "summary": "Roots returns the root CAs",
        "operationId": "CIService_GetRoots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbRootsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "CIService"
        ]
      }
    }
  },
  "definitions": {
    "pbCertificate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "Id of the certificate"
        },
        "org_id": {
          "type": "string",
          "format": "uint64",
          "title": "OrgId of the certificate, only used with Org scope"
        },
        "skid": {
          "type": "string",
          "title": "Skid provides Subject Key Identifier"
        },
        "ikid": {
          "type": "string",
          "title": "Ikid provides Issuer Key Identifier"
        },
        "serialNumber": {
          "type": "string",
          "title": "SerialNumber provides Serial Number"
        },
        "not_before": {
          "type": "string",
          "format": "date-time",
          "title": "NotBefore is the time when the validity period starts"
        },
        "not_after": {
          "type": "string",
          "format": "date-time",
          "title": "NotAfter is the time when the validity period starts"
        },
        "subject": {
          "type": "string",
          "title": "Subject name"
        },
        "issuer": {
          "type": "string",
          "title": "Issuer name"
        },
        "sha256": {
          "type": "string",
          "title": "SHA256 thnumbprint of the cert"
        },
        "profile": {
          "type": "string",
          "title": "Profile of the certificate"
        },
        "pem": {
          "type": "string",
          "title": "Pem encoded certificate"
        },
        "issuers_pem": {
          "type": "string",
          "title": "IssuersPem provides PEM encoded issuers"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Locations of published certificate"
        }
      },
      "title": "Certificate provides X509 Certificate information"
    },
    "pbCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/pbCertificate"
        }
      },
      "title": "CertificateResponse returns Certificate"
    },
    "pbCertificatesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbCertificate"
          }
        }
      },
      "title": "CertificatesResponse returns Certificates list"
    },
    "pbReason": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "KEY_COMPROMISE",
        "CA_COMPROMISE",
        "AFFILIATION_CHANGED",
        "SUPERSEDED",
        "CESSATION_OF_OPERATION",
        "CERTIFICATE_HOLD",
        "REMOVE_FROM_CRL",
        "PRIVILEGE_WITHDRAWN",
        "AA_COMPROMISE"
      ],
      "default": "UNSPECIFIED",
      "title": "Reason specifies Certificate Revocation Reason from RFC 5280\nCRLReason ::= ENUMERATED {\n       unspecified             (0),\n       keyCompromise           (1),\n       cACompromise            (2),\n       affiliationChanged      (3),\n       superseded              (4),\n       cessationOfOperation    (5),\n       certificateHold         (6),\n            -- value 7 is not used\n       removeFromCRL           (8),\n       privilegeWithdrawn      (9),\n       aACompromise           (10) }"
    },
    "pbRevokedCertificate": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/pbCertificate"
        },
        "revoked_at": {
          "type": "string",
          "format": "date-time"
        },
        "reason": {
          "$ref": "#/definitions/pbReason"
        }
      },
      "title": "RevokedCertificate provides X509 Cert information"
    },
    "pbRevokedCertificatesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbRevokedCertificate"
          }
        }
      },
      "title": "RevokedCertificatesResponse returns Revoked Certificates list"
    },
    "pbRootCertificate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "Id of the certificate"
        },
        "skid": {
          "type": "string",
          "title": "Skid provides Subject Key Identifier"
        },
        "not_before": {
          "type": "string",
          "format": "date-time",
          "title": "NotBefore is the time when the validity period starts"
        },
        "not_after": {
          "type": "string",
          "format": "date-time",
          "title": "NotAfter is the time when the validity period starts"
        },
        "subject": {
          "type": "string",
          "title": "Subject name"
        },
        "sha256": {
          "type": "string",
          "title": "SHA256 thnumbprint of the cert"
        },
        "trust": {
          "$ref": "#/definitions/pbTrust",
          "title": "Trust scope"
        },
        "pem": {
          "type": "string",
          "title": "PEM encoded certificate"
        }
      },
      "title": "Root provides X509 Root Cert information"
    },
    "pbRootsResponse": {
      "type": "object",
      "properties": {
        "roots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbRootCertificate"
          }
        }
      },
      "title": "RootsResponse returns Root Certificates"
    },
    "pbTrust": {
      "type": "string",
      "enum": [
        "Any",
        "Public",
        "Private"
      ],
      "default": "Any"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
