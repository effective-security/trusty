{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/pb/ca.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CAService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/ca/issuers": {
      "get": {
        "summary": "Issuers returns the issuing CAs",
        "operationId": "CAService_Issuers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbIssuersInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "CAService"
        ]
      }
    },
    "/v1/ca/profile_info": {
      "post": {
        "summary": "ProfileInfo returns the certificate profile info",
        "operationId": "CAService_ProfileInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCertProfileInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "CAService"
        ]
      }
    },
    "/v1/ca/sign": {
      "post": {
        "summary": "SignCertificate returns the certificate",
        "operationId": "CAService_SignCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "CAService"
        ]
      }
    }
  },
  "definitions": {
    "pbCAConstraint": {
      "type": "object",
      "properties": {
        "isCa": {
          "type": "boolean"
        },
        "maxPathLen": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "CAConstraint specifies various CA constraints on the signed certificate.\nCAConstraint would verify against (and override) the CA\nextensions in the given CSR."
    },
    "pbCSRAllowedFields": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "boolean"
        },
        "dns": {
          "type": "boolean"
        },
        "ip": {
          "type": "boolean"
        },
        "email": {
          "type": "boolean"
        },
        "uri": {
          "type": "boolean"
        }
      }
    },
    "pbCertProfile": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "usages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Usage provides a list key usages"
        },
        "caConstraint": {
          "$ref": "#/definitions/pbCAConstraint"
        },
        "ocspNoCheck": {
          "type": "boolean"
        },
        "expiry": {
          "type": "string"
        },
        "backdate": {
          "type": "string"
        },
        "allowedExtensions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedNames": {
          "type": "string",
          "title": "AllowedNames specifies a RegExp to check for allowed names.\nIf not provided, then all values are allowed"
        },
        "allowedDns": {
          "type": "string",
          "title": "AllowedDns specifies a RegExp to check for allowed DNS.\nIf not provided, then all values are allowed"
        },
        "allowedEmail": {
          "type": "string",
          "title": "AllowedEmail specifies a RegExp to check for allowed email.\nIf not provided, then all values are allowed"
        },
        "allowedUri": {
          "type": "string",
          "title": "AllowedUri specifies a RegExp to check for allowed URI.\nIf not provided, then all values are allowed"
        },
        "allowedFields": {
          "$ref": "#/definitions/pbCSRAllowedFields",
          "description": "AllowedFields provides booleans for fields in the CSR.\nIf a AllowedFields is not present in a CertProfile,\nall of these fields may be copied from the CSR into the signed certificate.\nIf a AllowedFields *is* present in a CertProfile,\nonly those fields with a `true` value in the AllowedFields may\nbe copied from the CSR to the signed certificate.\nNote that some of these fields, like Subject, can be provided or\npartially provided through the API.\nSince API clients are expected to be trusted, but CSRs are not, fields\nprovided through the API are not subject to validation through this\nmechanism."
        }
      },
      "title": "CertProfile provides certificate profile"
    },
    "pbCertProfileInfo": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/pbCertProfile"
        }
      },
      "title": "CertProfileInfo is the response for an Profile Info API request"
    },
    "pbCertificate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "Id of the certificate"
        },
        "org_id": {
          "type": "string",
          "format": "uint64",
          "title": "OrgId of the certificate, only used with Org scope"
        },
        "skid": {
          "type": "string",
          "title": "Skid provides Subject Key Identifier"
        },
        "ikid": {
          "type": "string",
          "title": "Ikid provides Issuer Key Identifier"
        },
        "serialNumber": {
          "type": "string",
          "title": "SerialNumber provides Serial Number"
        },
        "not_before": {
          "type": "string",
          "format": "date-time",
          "title": "NotBefore is the time when the validity period starts"
        },
        "not_after": {
          "type": "string",
          "format": "date-time",
          "title": "NotAfter is the time when the validity period starts"
        },
        "subject": {
          "type": "string",
          "title": "Subject name"
        },
        "issuer": {
          "type": "string",
          "title": "Issuer name"
        },
        "sha256": {
          "type": "string",
          "title": "SHA256 thnumbprint of the cert"
        },
        "profile": {
          "type": "string",
          "title": "Profile of the certificate"
        },
        "pem": {
          "type": "string",
          "title": "Pem encoded certificate"
        },
        "issuers_pem": {
          "type": "string",
          "title": "IssuersPem provides PEM encoded issuers"
        }
      },
      "title": "Certificate provides X509 Certificate information"
    },
    "pbCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/pbCertificate"
        }
      }
    },
    "pbEncodingFormat": {
      "type": "string",
      "enum": [
        "PEM",
        "DER",
        "PKCS7"
      ],
      "default": "PEM"
    },
    "pbIssuerInfo": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "title": "Certificate provides the certificate in PEM format"
        },
        "intermediates": {
          "type": "string",
          "title": "Intermediates provides the intermediate CA certificates bundle in PEM format"
        },
        "root": {
          "type": "string",
          "title": "Root provides the Root CA certificate in PEM format"
        },
        "label": {
          "type": "string",
          "title": "Label specifies the Issuer's label"
        }
      },
      "title": "IssuerInfo provides Issuer information"
    },
    "pbIssuersInfoResponse": {
      "type": "object",
      "properties": {
        "issuers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbIssuerInfo"
          }
        }
      },
      "title": "IssuersInfoResponse provides response for Issuers Info request"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
