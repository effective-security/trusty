name: Build

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

env:
  EVENT_NUMBER: ${{ github.event.number }}
  ITEST_IMAGE_TAG: rc-${{ github.event.number }}
  COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
  # A unique number for each workflow run within a repository.
  # This number does not change if you re-run the workflow run.
  RUN_ID: ${{ github.run_id }}
  # A unique number for each run of a particular workflow in a repository.
  # This number begins at 1 for the workflow's first run, and increments with each new run.
  # This number does not change if you re-run the workflow run.
  RUN_NUMBER: ${{ github.run_number }}
  # A unique number for each attempt of a particular workflow run in a repository.
  # This number begins at 1 for the workflow run's first attempt, and increments with each re-run.
  RUN_ATTEMPT: ${{ github.run_attempt }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  # NOTE(epk) this identifier is used to easily bust a pre-existing go
  # mod/build cache. To do so simply increment this number.
  GO_CACHE_BUSTER: 5

jobs:
  TestAndDeploy:
    runs-on: ubuntu-latest
    env:
      EVENT_NUMBER: ${{ github.event.number }}
    steps:
      - name: Create code coverage status for the current commit
        if: github.event_name == 'pull_request'
        run: |
          curl "https://${GIT_USER}:${GIT_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" -d "{\"state\": \"pending\",\"target_url\": \"https://github.com/${GITHUB_REPOSITORY}/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"in progress â€” This check has started... \",\"context\": \"code cov\"}"
        env:
          GIT_TOKEN: ${{ secrets.BUILDER_PAT }}
          GIT_USER: ${{ secrets.GIT_USER }}

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.BUILDER_PAT }}
        run: git config --global url."https://dissoupov:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Checkout
        uses: actions/checkout@v3
        # with:
        #   fetch-depth: 0
        #   submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      # - name: Setup Golang with cache
      #   uses: ./.github/actions/go-cache
      #   with:
      #     go-version-file: go.mod

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod

      - name: Find Go cache locations
        id: go-cache-paths
        shell: bash
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        id: go-build-cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}
          restore-keys: ${{ runner.os }}-go-build-${{ inputs.cache-key-suffix }}

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        id: go-mod-cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}-${{ env.GO_CACHE_BUSTER }}
          restore-keys: ${{ runner.os }}-go-mod-${{ inputs.cache-key-suffix }}

      - name: Go Artifacts
        if: steps.go-mod-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          go mod download
          go mod tidy

      - name: Prepare
        run: make vars tools folders generate  version change_log

      - name: UnitTest
        run: make build start-local-deps gen_test_certs gen_shaken_certs

      - name: Test
        if: github.event_name == 'push'
        run: make test

      - name: CovTest
        if: github.event_name == 'pull_request'
        run: make covtest

      - name: Generate covarege Status
        if: github.event_name == 'pull_request'
        run: |
          set -x

          total=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
          echo "${GIT_USER}: total cov: $total"
          (( $(echo "$total > ${MIN_TESTCOV}" | bc -l) )) && STATE=success || STATE=failure
          curl "https://${GIT_USER}:${GIT_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" -d "{\"state\": \"${STATE}\",\"target_url\": \"https://github.com/${GITHUB_REPOSITORY}/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"${total}%\",\"context\": \"code cov\"}"
        env:
          GIT_TOKEN: ${{ secrets.BUILDER_PAT }}
          GIT_USER: ${{ secrets.GIT_USER }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker trusty meta
        id: meta_trusty
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            effectivesecurity/trusty
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Docker trusty docker/build-push-action@v2
        id: docker_build_trusty
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile
          context: .
          push: true
          tags: ${{ steps.meta_trusty.outputs.tags }}
          labels: ${{ steps.meta_trusty.outputs.labels }}

      - name: Integration Test
        env:
          ITEST_IMAGE_TAG: ${{ fromJSON(steps.meta_trusty.outputs.json).labels['org.opencontainers.image.version'] }}
        run: |
          echo "ITEST_IMAGE_TAG=$ITEST_IMAGE_TAG"
          make docker-citest

      # - name: coveralls
      #   # if: github.event_name == 'pull_request'
      #   env:
      #     COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: make coveralls-github
