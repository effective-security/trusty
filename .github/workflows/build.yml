name: Build

on:
  push:
    branches:
    - main
    - master
    tags:
    - 'v*'
  pull_request:

jobs:

  context-info:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          echo "$GITHUB_CONTEXT" && \
          echo "GITHUB_REF=$GITHUB_REF GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
      - name: Repo info
        run: |
          curl -s \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}
  UnitTest:
    strategy:
      matrix:
        go-version: [1.16.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      EVENT_NUMBER: ${{ github.event.number }}

    steps:

    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install softhsm2
      run: sudo apt-get install softhsm2 opensc
    - name: Prepare
      run: make vars tools folders generate hsmconfig

    - name: UnitTest
      env:
        TRUSTY_GITHUB_CLIENT_ID: ${{ secrets.TRUSTY_GITHUB_CLIENT_ID }}
        TRUSTY_GITHUB_CLIENT_SECRET: ${{ secrets.TRUSTY_GITHUB_CLIENT_SECRET }}
        TRUSTY_GOOGLE_CLIENT_ID: ${{ secrets.TRUSTY_GOOGLE_CLIENT_ID }}
        TRUSTY_GOOGLE_CLIENT_SECRET: ${{ secrets.TRUSTY_GOOGLE_CLIENT_SECRET }}
        TRUSTY_MAILGUN_PRIVATE_KEY: ${{ secrets.TRUSTY_MAILGUN_PRIVATE_KEY }}
        TRUSTY_STRIPE_API_KEY: ${{ secrets.TRUSTY_STRIPE_API_KEY }}
        TRUSTY_STRIPE_WEBHOOK_SECRET: ${{ secrets.TRUSTY_STRIPE_WEBHOOK_SECRET }}
      run: make build gen_test_certs gen_martini_certs start-local-kms start-sql start-stripe-mock covtest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Registry
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker trusty meta
      id: meta_trusty
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          ekspand/trusty
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Docker trusty docker/build-push-action@v2
      id: docker_build_trusty
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile
        context: .
        push: true
        tags: ${{ steps.meta_trusty.outputs.tags }}
        labels: ${{ steps.meta_trusty.outputs.labels }}

    - name: Docker kubeca meta
      id: meta_kubeca
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          ekspand/kubeca
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Docker kubeca docker_build_kubecertinit
      id: docker_build_kubeca
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile.kubeca
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta_kubeca.outputs.tags }}
        labels: ${{ steps.meta_kubeca.outputs.labels }}

    - name: Docker kubecertinit meta
      id: meta_kubecertinit
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          ekspand/kubecertinit
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Docker kubecertinit build
      id: docker_build_kubecertinit
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile.kubecertinit
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta_kubecertinit.outputs.tags }}
        labels: ${{ steps.meta_kubecertinit.outputs.labels }}

    - name: Integration Test
      env:
        ITEST_IMAGE_TAG: ${{ fromJSON(steps.meta_trusty.outputs.json).labels['org.opencontainers.image.version'] }}
      run: |
        echo "ITEST_IMAGE_TAG=$ITEST_IMAGE_TAG"
        make docker-citest

    - name: Get PR number
      if: github.event_name == 'push'
      id: get_pr_number
      uses: actions-ecosystem/action-get-merged-pull-request@v1.0.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create tags comment
      if: steps.get_pr_number.number
      uses: peter-evans/create-or-update-comment@v1
      with:
        issue-number: ${{ steps.get_pr_number.number }}
        body: |
          ### trusty 
            - tags:
            ${{ steps.meta_trusty.outputs.tags }}

          ### kubeca
          - tags:
            ${{ steps.meta_kubeca.outputs.tags }}

          ### kubecertinit
          - tags:
            ${{ steps.meta_kubecertinit.outputs.tags }}

    - name: coveralls
      # if: github.event_name == 'pull_request'
      env:
        COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: make coveralls-github
