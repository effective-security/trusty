name: Build

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

env:
  EVENT_NUMBER: ${{ github.event.number }}
  ITEST_IMAGE_TAG: rc-${{ github.event.number }}
  COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
  # A unique number for each workflow run within a repository.
  # This number does not change if you re-run the workflow run.
  RUN_ID: ${{ github.run_id }}
  # A unique number for each run of a particular workflow in a repository.
  # This number begins at 1 for the workflow's first run, and increments with each new run.
  # This number does not change if you re-run the workflow run.
  RUN_NUMBER: ${{ github.run_number }}
  # A unique number for each attempt of a particular workflow run in a repository.
  # This number begins at 1 for the workflow run's first attempt, and increments with each re-run.
  RUN_ATTEMPT: ${{ github.run_attempt }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  # NOTE(epk) this identifier is used to easily bust a pre-existing go
  # mod/build cache. To do so simply increment this number.
  GO_CACHE_BUSTER: 5

jobs:
  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.noop.outputs.should_skip }}
      paths_result: ${{ steps.noop.outputs.paths_result }}
    steps:
      - name: Detect No-op Changes
        # https://github.com/fkirc/skip-duplicate-actions
        id: noop
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg", "**/Documentation/**"]'
          do_not_skip: '["push","schedule","release"]'
          concurrent_skipping: false
          paths_filter: |
            go:
              paths:
                - '**/*.go'
            version:
              paths:
                - '.VERSION'

      - name: vars
        run: |
          echo "EVENT_NUMBER: ${{env.EVENT_NUMBER}}"
          echo "COMMIT_SHA: ${{env.COMMIT_SHA}}"
          echo "PULL_NUMBER: ${{env.PULL_NUMBER}}"
          echo "RUN_ID: ${{env.RUN_ID}}"
          echo "RUN_NUMBER: ${{env.RUN_NUMBER}}"
          echo "RUN_ATTEMPT: ${{env.RUN_ATTEMPT}}"

  TestAndDeploy:
    runs-on: ubuntu-latest
    needs:
      - detect-noop

    steps:
      - name: Create code coverage status for the current commit
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' && needs.detect-noop.outputs.should_skip != 'true'
        run: |
          curl "https://${GIT_USER}:${GIT_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" -d "{\"state\": \"pending\",\"target_url\": \"https://github.com/${GITHUB_REPOSITORY}/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"in progress â€” This check has started... \",\"context\": \"code cov\"}"
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_USER: ${{ github.actor }}

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.BUILDER_PAT }}
        run: git config --global url."https://dissoupov:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Checkout
        uses: actions/checkout@v4
        # with:
        #   fetch-depth: 0
        #   submodules: true

      - name: Fetch History
        run: |
          git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Prepare
        run: make vars tools folders generate  version change_log

      - name: Build
        run: make build start-localstack gen_test_certs gen_shaken_certs

      - name: Test
        if: github.event_name == 'push' && needs.detect-noop.outputs.should_skip != 'true'
        run: make test

      - name: CovTest
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' && needs.detect-noop.outputs.should_skip != 'true'
        run: |
          make covtest
          set -x && \
          total=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'` && \
          echo "${GIT_USER}: total cov: $total" && \
          (( $(echo "$total > ${MIN_TESTCOV}" | bc -l) )) && STATE=success || STATE=failure && \
          curl "https://${GIT_USER}:${GIT_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" -d "{\"state\": \"${STATE}\",\"target_url\": \"https://github.com/${GITHUB_REPOSITORY}/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"${total}%\",\"context\": \"code cov\"}"
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_USER: ${{ github.actor }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Docker trusty
        id: docker_build_trusty_ci
        uses: docker/build-push-action@v6.2.0
        with:
          file: ./Dockerfile
          context: .
          load: true
          tags: effectivesecurity/trusty:${{ env.ITEST_IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Integration Test
        run: |
          docker save -o /tmp/trusty-${{ env.ITEST_IMAGE_TAG }}.tar effectivesecurity/trusty:${{ env.ITEST_IMAGE_TAG }}
          docker load --input /tmp/trusty-${{ env.ITEST_IMAGE_TAG }}.tar
          echo "ITEST_IMAGE_TAG=$ITEST_IMAGE_TAG"
          make docker-citest
          # fix docker cache

      - name: Docker trusty meta
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: meta_trusty
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            effectivesecurity/trusty
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Docker trusty
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: docker_build_trusty
        uses: docker/build-push-action@v6.2.0
        with:
          file: ./Dockerfile
          context: .
          push: true
          tags: ${{ steps.meta_trusty.outputs.tags }}
          labels: ${{ steps.meta_trusty.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Detect Version Changes
        # https://github.com/fkirc/skip-duplicate-actions
        id: version-changed
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths: '[".VERSION"]'
          skip_after_successful_duplicate: false
          paths_filter: |
            version:
              paths:
                - '.VERSION'
              backtracking: 2

      - name: set-tag
        run: |
          VERSION=$(cat .VERSION).$(git rev-list --count HEAD)
          echo "VERSION: ${VERSION}"
          echo "DIST_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "git tag ${VERSION}"

      - name: Create Tag
        # If 'skip-duplicate-actions' terminates before the paths checks are performed (for example, when a successful duplicate run has
        # been found) 'paths_result' outputs an empty object ('{}'). This can be easily intercepted in the if condition of a job
        # by checking the result of the "global" 'should_skip' output first.
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.version-changed.outputs.should_skip != 'true' && !fromJSON(steps.version-changed.outputs.paths_result).version.should_skip
        uses: actions/github-script@v7
        with:
          script: |
            const {DIST_VERSION} = process.env          
            github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${DIST_VERSION}`,
                sha: context.sha
            })
